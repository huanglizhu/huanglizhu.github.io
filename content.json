{"meta":{"title":"珠","subtitle":null,"description":null,"author":"黄丽珠","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-09-16T04:23:50.000Z","updated":"2019-09-16T07:02:13.642Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"作者： HLZ 出处： http://huanglizhu.github.io/ 本文基于 知识共享署名-相同方式共享 4.0 国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名 HLZ及链接。"},{"title":"分类","date":"2019-09-16T04:23:41.000Z","updated":"2019-09-16T08:55:15.762Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-09-16T04:23:28.000Z","updated":"2019-09-16T04:25:08.820Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"百度前端技术学院 第四天学习笔记（伪类选择器、组合、选择器的优先级）（3）","slug":"百度前端技术学院 第四天学习笔记（3）","date":"2019-10-11T12:58:05.000Z","updated":"2019-10-11T12:59:11.026Z","comments":true,"path":"2019/10/11/百度前端技术学院 第四天学习笔记（3）/","link":"","permalink":"http://yoursite.com/2019/10/11/百度前端技术学院 第四天学习笔记（3）/","excerpt":"伪类选择器:first-child表示一组同级元素中的第一元素","text":"伪类选择器:first-child表示一组同级元素中的第一元素 例子： 1234567891011&lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;li&gt;Item 3 &lt;ul&gt; &lt;li&gt;Item 3.1&lt;/li&gt; &lt;li&gt;Item 3.2&lt;/li&gt; &lt;li&gt;Item 3.3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 12345678ul li &#123; color: blue;&#125;ul li:first-child &#123; color: red; font-weight: bold;&#125; :last-child表示一组同级元素中的最后一个元素 用法与:first-child相似。 :only-child表示没有任何兄弟姐妹的元素 例子1： 123456789&lt;div&gt; &lt;div&gt;I am an only child.&lt;/div&gt;&lt;/div&gt;&lt;div&gt; &lt;div&gt;I am the 1st sibling.&lt;/div&gt; &lt;div&gt;I am the 2nd sibling.&lt;/div&gt; &lt;div&gt;I am the 3rd sibling, &lt;div&gt;but this is an only child.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; 123456789div:only-child &#123; color: red;&#125;div &#123; display: inline-block; margin: 6px; outline: 1px solid;&#125; 例子2： 1234567891011121314&lt;ol&gt; &lt;li&gt;First &lt;ul&gt; &lt;li&gt;This list has just one element.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Second &lt;ul&gt; &lt;li&gt;This list has three elements.&lt;/li&gt; &lt;li&gt;This list has three elements.&lt;/li&gt; &lt;li&gt;This list has three elements.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ol&gt; 12345678li li &#123; list-style-type: disc;&#125;li:only-child &#123; color: red; list-style-type: square;&#125; :invalid设置值无效时的样式 用于在表单元素中的值是非法时设置指定样式。该伪类对于突出显示用户的字段错误很有用。 例子 参考 组合后代选择器（Descendant selector） 用空格分隔开两个选择器。 这些选择器选择的元素是其他选择器的后代。他们不需要是直接子元素就可以配对(子孙后代都可以)。 通过这个概念我们遇到父元素有class时子元素就不需要再添加额外的class了。 例子： 123.box p &#123; color: red;&#125; 12&lt;div class=\"box\"&gt;&lt;p&gt;Text in .box&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Text not in .box&lt;/p&gt; 儿童组合器（Child combinator） 用大于号分隔开两个选择器。 仅当选择器选择直接子元素时才匹配。层次结构后面的子孙不匹配。（注意：直接子元素并不是一定只有一个，要与伪类选择器:first-child区别开来） 例子： 123ul &gt; li &#123; border-top: 5px solid red;&#125; 1234567891011&lt;ul&gt; &lt;!--这个`&lt;li&gt;`是`&lt;ul&gt;`的直接子元素--&gt; &lt;li&gt;Unordered item&lt;/li&gt; &lt;!--这个`&lt;li&gt;`也是`&lt;ul&gt;`的直接子元素--&gt; &lt;li&gt;Unordered item &lt;ol&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt;&lt;/ul&gt; 上面的例子中有一个无序列表，嵌套在其中的是另一个无序列表。我正在使用子组合器来选择仅&lt;li&gt;是&lt;ul&gt;的直接子元素的元素，并为其赋予了顶部边框。 如果删除&gt;,则最终&lt;li&gt;将得到后代选择器，所有元素都将显示红色边框。 直接相邻的同级选择器(Adjacent sibling) 用加号分隔开两个选择器。 用于选择与层次结构中相同级别的另一个元素相邻的对象。 注意：这两个选择器不仅要是同级别的，还要直接相邻。 例子： 123456h1 + p &#123; font-weight: bold; background-color: green; color: #fff; padding: .5em;&#125; 12345678&lt;article&gt; &lt;h1&gt;A heading&lt;/h1&gt; &lt;p&gt;Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.&lt;/p&gt; &lt;p&gt;Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.&lt;/p&gt;&lt;/article&gt; 一个常见的用例是对标题后面的段落进行处理，如上面的额例子所示。在这里，我们正在寻找与&lt;h1&gt;相邻的段落，并为其设置样式。 如果在&lt;h1&gt;与&lt;p&gt;之间插入其他元素，例如&lt;h2&gt;，则会发现该段落不再与选择器匹配，因此当该元素相邻时，也不会应用背景色和前景色。 一般同级（General sibling）[不相邻的同级选择器] 用~分隔开两个选择器。 用于选择与层次结构中相同级别的所有指定选择器的对象（包括直接相邻的同级），也可以使用常规的同级组合器。 注意：空格分隔开的是父元素与子元素组成的后代选择器，~分隔开的是同级别的所有指定选择器的对象。 例子： 123456h1~p &#123; font-weight: bold; background-color: #333; color: #fff; padding: .5em;&#125; 123456&lt;article&gt; &lt;h1&gt;A heading&lt;/h1&gt; &lt;p&gt;I am a paragraph.&lt;/p&gt; &lt;div&gt;I am a div&lt;/div&gt; &lt;p&gt;I am another paragraph.&lt;/p&gt;&lt;/article&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"百度前端技术学院 第四天学习笔记（CSS边框、列表）（2）","slug":"百度前端技术学院 第四天学习笔记（2）","date":"2019-10-09T13:04:38.000Z","updated":"2019-10-11T07:02:25.113Z","comments":true,"path":"2019/10/09/百度前端技术学院 第四天学习笔记（2）/","link":"","permalink":"http://yoursite.com/2019/10/09/百度前端技术学院 第四天学习笔记（2）/","excerpt":"总结 按照 top-right-bottom-left 的顺序设置（不同的四边样式/宽度）","text":"总结 按照 top-right-bottom-left 的顺序设置（不同的四边样式/宽度） 1border-width: 15px 5px 15px 5px; 1border-style: solid dotted dashed double;/*实线上边框、点线右边框、虚线下边框和一个双线左边框*/ border-style 的默认值是 none，如果没有声明样式，就相当于 border-style: none。必须记得设置边框样式border-style，否则边框就不会出现。（不管宽度设置了多少） border简写三个属性123.box &#123; border: 1px solid black; &#125; 相当于 12345.box &#123; border-width: 1px; border-style: solid; border-color: black; &#125; 综合运用例子1234567891011.box &#123; background-color: #567895; border: 5px solid #0b385f;/*宽度为5px ，solid 实线*/ border-bottom-style: dashed;/*底部：dashed虚线,样式与颜色和其他三边一样*/ color: #fff;&#125;h2 &#123; border-top: 2px dotted rebeccapurple;/*顶部：宽度为2px ，dotted 点线，rebeccapurple紫色*/ border-bottom: 1em double rgb(24, 163, 78);/*底部双实线*/&#125; 1234&lt;div class=\"box\"&gt; &lt;h2&gt;Borders&lt;/h2&gt; &lt;p&gt;Try changing the borders.&lt;/p&gt;&lt;/div&gt; 边框样式border-styleborder-style 的默认值是 none，如果没有声明样式，就相当于 border-style: none注意：必须记得设置边框样式border-style，否则边框就不会出现。 定义不同的四边样式：这里的值采用了top-right-bottom-left 的顺序： 12345.box &#123; background-color: #567895; border-width:8px; border-style: solid dotted dashed double;/*实线上边框、点线右边框、虚线下边框和一个双线左边框*/&#125; 定义单边样式： border-top-style border-right-style border-bottom-style border-left-style 因此这两种方法是等价的： 12p &#123;border-style: solid solid solid none;&#125;p &#123;border-style: solid; border-left-style: none;&#125; 注意：如果要使用第二种方法，必须把单边属性放在简写属性之后，因为如果把单边属性放在 border-style 之前，简写属性的值就会覆盖单边值 none。 边框宽度 border-width属性值： 长度值 关键字 比如 2px 或 0.1em thin 、medium（默认值） 和 thick 注释：CSS 没有定义 3 个关键字的具体宽度，所以一个用户代理可能把 thin 、medium 和 thick 分别设置为等于 5px、3px 和 2px，而另一个用户代理则分别设置为 3px、2px 和 1px。 定义不同边的宽度按照 top-right-bottom-left 的顺序设置元素的各边边框： border-width: 15px 5px 15px 5px; 也可以简写为（这样写法称为值复制）：border-width: 15px 5px; 定义单边样式： border-top-width border-right-width border-bottom-width border-left-width 边框的颜色 border-color属性值：可以是命名颜色，也可以是十六进制和 RGB 值。 1234p &#123; border-style: solid; border-color: blue rgb(25%,35%,45%) #909090 red; &#125; 默认值： 默认的边框颜色是元素本身的前景色。如果没有为边框声明颜色，它将与元素的文本颜色相同。 如果元素没有任何文本，假设它是一个表格，其中只包含图像，那么该表的边框颜色就是其父元素的文本颜色（因为 color 可以继承）。这个父元素很可能是 body、div 或另一个 table。 值复制：如果颜色值小于 4 个，值复制就会起作用。例如下面的规则声明了段落的上下边框是蓝色，左右边框是红色(按照top-right-bottom-left 的顺序)： 1234p &#123; border-style: solid; border-color: blue red; &#125; 定义单边颜色： border-top-color border-right-color border-bottom-color border-left-color 透明边框transparent：边框颜色值 transparent。这个值用于创建有宽度的不可见边框。 123456a:link, a:visited &#123; border-style: solid; border-width: 5px; border-color: transparent; &#125;a:hover &#123;border-color: gray;&#125; 完整例子 从某种意义上说，利用 transparent，使用边框就像是额外的内边距一样；此外还有一个好处，就是能在你需要的时候使其可见。这种透明边框相当于内边距，因为元素的背景会延伸到边框区域（如果有可见背景的话）。 重要事项：在 IE7 之前，IE/WIN 没有提供对 transparent 的支持。在以前的版本，IE 会根据元素的 color 值来设置边框颜色。 圆角border-radius属性值：一个或两个长度或百分比，第一个值定义水平半径，第二个值定义垂直半径。 1border-radius: 10px; /*使一个框的所有四个角的半径为10px*/ 1border-top-right-radius: 1em 10%; /*使右上角的水平半径为1em，垂直半径为10％*/ 例子: 12345.box &#123; border: 10px solid rebeccapurple; border-radius: 1em; border-top-right-radius: 10% 30%;&#125; 1234&lt;div class=\"box\"&gt; &lt;h2&gt;Borders&lt;/h2&gt; &lt;p&gt;Try changing the borders.&lt;/p&gt;&lt;/div&gt; 列表简写list-style 这个属性可以在 &lt;ul&gt; 或 &lt;ol&gt; 或&lt;li&gt;元素上设置。 属性值可以任意顺序排列，你可以设置一个，两个或者三个值（该属性的默认值为 disc, none, outside） list-style-type的默认值是disc（实心圆）list-style-position的默认值是outside（标志出现在列表项内容之外）list-style-image的默认值是none 只要提供了一个值，其它的就会填入其默认值。如果指定了 type 和 image，如果由于某种原因导致图像无法加载，则 type 将用作回退。123li &#123;list-style : url(example.gif) square inside&#125; 列表的项目符号的类型list-style-type 设置列表的项目符号的类型，例如无序列表的方形或圆形项目符号，或有序列表的数字，字母或罗马数字。 取值参考1 把无序列表中的列表项标志设置为方块:1ul &#123;list-style-type : square&#125; 图像标志list-style-image1ul li &#123;list-style-image : url(xxx.gif)&#125; 列表标志位置list-style-position 决定标志出现在列表项内容之外还是内容内部。 默认值为 outside。 设置链接的样式链接的四种状态： a:link - 普通的、未被访问的链接 a:visited - 用户已访问的链接 a:hover - 鼠标指针位于链接的上方 a:active - 链接被点击的时刻 注意： a:hover 必须位于 a:link 和 a:visited 之后 a:active 必须位于 a:hover 之后 举例： 1234a:link &#123;color:#FF0000;&#125; /* 未被访问的链接 */a:visited &#123;color:#00FF00;&#125; /* 已被访问的链接 */a:hover &#123;color:#FF00FF;&#125; /* 鼠标指针移动到链接上 */a:active &#123;color:#0000FF;&#125; /* 正在被点击的链接 */ 常见的链接样式属性文本修饰（下划线）text-decoration 大多用于去掉链接中的下划线 underline、none 背景色background-color 规定链接的背景色 鼠标光标的样式cursor 不应该把这个关掉，除非你有非常好的理由。 属性值 文字的轮廓（框）outline 轮廓有点像边框，唯一的区别是边框占用了盒模型的空间，而轮廓没有； 它只是设置在背景图片的顶部。 语法： 12/* 宽度 | 样式 | 颜色 */outline: 1px solid white; 取值： 任意顺序的1~3个属性值。 属性 值 outline-width 关键字（取决于用户代理）：thin/medium/thick长度：10px/1rem全局值:inherit outline-style 关键字：none(默认值);auto; dotted;dashed; solid; double;groove; ridge;inset; outset;全局值:inherit;initial; unset; 例子：123456789101112&lt;head&gt;&lt;style&gt;a:link &#123;/* 未被访问的链接 */ background-color:yellow; outline: solid #000;/*黑色实线框*/&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;b&gt;&lt;a href=\"www.huanglizhu.github.io\" target=\"_blank\"&gt;点我点我&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/body&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"call（）与apply（）","slug":"call()与apply()","date":"2019-10-08T06:26:40.000Z","updated":"2019-10-09T02:24:49.832Z","comments":true,"path":"2019/10/08/call()与apply()/","link":"","permalink":"http://yoursite.com/2019/10/08/call()与apply()/","excerpt":"方法重用：call() 和 apply() 不带参数的使用方法非常相似。 带参数的使用方法有所区别：","text":"方法重用：call() 和 apply() 不带参数的使用方法非常相似。 带参数的使用方法有所区别： 方法 参数 举例 call() 参数列表 person.fullName.call(person1, “Oslo”, “Norway”); apply() 数组形式 person.fullName.apply(person1, [“Oslo”, “Norway”]); 如果要使用数组而不是参数列表，则 apply() 方法非常方便。 面试题语句var arr=[a,b,c,d];执行后，数组arr中每项都是一个整数，能得到其中最大整数语句有： Math.max(arr[0], arr[1], arr[2], arr[3]) Math.max.call(Math, arr[0], arr[1], arr[2], arr[3]) Math.max.apply(Math,arr) 不能得到其中最大整数语句有： 1Math.max(arr) 解析Math的max（）不支持传入数组,所以错误。 JavaScript 函数 Call可以通过 call()调用属于另一个对象的方法。 例子1:普通方法调用 下面的例子创建了带有三个属性的对象（firstName、lastName、fullName）。 12345678var person = &#123; firstName:\"Bill\", lastName: \"Gates\", fullName: function () &#123; return this.firstName + \" \" + this.lastName; &#125;&#125;person.fullName(); // 将返回 \"Bill Gates\" fullName 属性是一个方法。person 对象是该方法的拥有者。 fullName 属性属于 person 对象的方法。 例子2：使用函数 Call分别让person1与person2去调用person的fullName 方法： 123456789101112131415var person = &#123; fullName: function() &#123; return this.firstName + \" \" + this.lastName; &#125;&#125;var person1 = &#123; firstName:\"Bill\", lastName: \"Gates\",&#125;var person2 = &#123; firstName:\"Steve\", lastName: \"Jobs\",&#125;person.fullName.call(person1); // 将返回 \"Bill Gates\"person.fullName.call(person2); // 将返回 \"Steve Jobs\" 完整例子 例子3：带参数的 call() 方法让person1带着参数”Seattle”, “USA”去调用person的fullName属性（方法）： 12345678910var person = &#123; fullName: function(city, country) &#123; return this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country; &#125;&#125;var person1 = &#123; firstName:\"Bill\", lastName: \"Gates\"&#125;person.fullName.call(person1, \"Seattle\", \"USA\"); 完整例子 JavaScript 函数 Apply 可以通过 apply() 方法调用属于另一个对象的方法。 apply() 方法与 call() 方法非常相似。 例子：使用函数Apply让person1去调用person的fullName 方法： 12345678910var person = &#123; fullName: function() &#123; return this.firstName + \" \" + this.lastName; &#125;&#125;var person1 = &#123; firstName: \"Bill\", lastName: \"Gates\",&#125;person.fullName.apply(person1); // 将返回 \"Bill Gates\" 例子：带参数的 apply() 方法apply() 方法接受数组中的参数: 12345678910var person = &#123; fullName: function(city, country) &#123; return this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country; &#125;&#125;var person1 = &#123; firstName:\"John\", lastName: \"Doe\"&#125;person.fullName.apply(person1, [\"Oslo\", \"Norway\"]); 完整例子 使用Apply（）在数组上模拟 max 方法Math的max()方法首先我们了解可以使用Math.max() 方法找到（数字列表中的）最大数字： 1Math.max(1,2,3); // 会返回 3 完整例子 让数组调用Math的max()方法 但是JavaScript 数组没有 max() 方法，因此我们可以通过apply（）让数组调用 Math的max() 方法： 1Math.max.apply(null, [1,2,3]); // 也会返回 3 完整例子 第一个参数（null）无关紧要。在本例中未使用它。这些例子会给出相同的结果： Math.max.apply(Math, [1,2,3]); // 也会返回 3 Math.max.apply(&quot; &quot;, [1,2,3]); // 也会返回 3 Math.max.apply(0, [1,2,3]); // 也会返回 3 JavaScript 严格模式在 JavaScript 严格模式下，如果 apply()方法的第一个参数不是对象，则它将成为被调用函数的所有者（对象）。在“非严格”模式下，它成为全局对象。","categories":[{"name":"JavaScript学习","slug":"JavaScript学习","permalink":"http://yoursite.com/categories/JavaScript学习/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"函数相关知识点补充","slug":"函数相关知识点补充","date":"2019-10-07T08:10:44.000Z","updated":"2019-10-07T08:10:50.220Z","comments":true,"path":"2019/10/07/函数相关知识点补充/","link":"","permalink":"http://yoursite.com/2019/10/07/函数相关知识点补充/","excerpt":"函数是对象 JavaScript 函数是通过 function 关键词定义的。JavaScript 中的 typeof 运算符会为函数返回 “function”。但是最好是把 JavaScript 函数描述为对象。 JavaScript 函数都有属性和方法。","text":"函数是对象 JavaScript 函数是通过 function 关键词定义的。JavaScript 中的 typeof 运算符会为函数返回 “function”。但是最好是把 JavaScript 函数描述为对象。 JavaScript 函数都有属性和方法。 函数的对象属性arguments.length返回函数被调用时收到的参数数目： 123function myFunction(a, b) &#123; return arguments.length;//2&#125; 完整例子 函数的对象方法toString()以字符串形式返回函数： 12345function myFunction(a, b) &#123; return a * b;&#125;var txt = myFunction.toString(); 完整例子 函数声明与函数表达式函数声明 被声明的函数不会直接执行。它们被“保存供稍后使用”，当它们被调用时执行。 无法对函数声明进行自调用 一个名为multiply的函数声明：123function multiply(x, y) &#123; return x * y;&#125; // 没有分号 函数表达式 JavaScript 函数也可以用表达式来定义。 函数表达式可以在变量中存储。 在变量中保存函数表达式之后，此变量可用作函数. 存放在变量中的函数不需要函数名。他们总是使用变量名调用。 一个匿名函数的函数表达式，被赋值给变量multiply： 123var multiply = function(x, y) &#123; return x * y; &#125;; 一个命名为func_named的函数的函数表达式，被赋值给变量multiply： 123var multiply = function func_name(x, y) &#123; return x * y;&#125;; 自调用函数 函数表达式可以自调用。 自调用表达式是自动被调用（开始）的，在不进行调用的情况下。 函数表达式会自动执行，假如表达式后面跟着 ()。 您无法对函数声明进行自调用。 您需要在函数周围添加括号，以指示它是一个函数表达式。 匿名的自调用函数（没有名称的函数）例子：123(function () &#123; var x = \"Hello!!\"; //我会调用我自己&#125;)(); 完整例子 函数提升 关于提升 使用表达式定义的函数不会被提升。 这导致了JavaScript 函数能够在声明之前被调用，不过会undefined，还是建议规范书写代码。 箭头函数 IE11 或更早的版本不支持箭头函数。 箭头函数允许使用简短的语法来编写函数表达式。 不需要 function 关键字、return 关键字和花括号。 1234567// ES5var x = function(x, y) &#123; return x * y;&#125;// ES6const x = (x, y) =&gt; x * y; 箭头函数没有自己的 this。它们不适合定义对象方法。 箭头函数未被提升。它们必须在使用前进行定义。 使用 const 比使用 var 更安全，因为函数表达式始终是常量值。 如果函数是单个语句，则只能省略 return 关键字和大括号。因此，保留它们可能是一个好习惯： 1const x = (x, y) =&gt; &#123; return x * y &#125;;","categories":[{"name":"JavaScript学习","slug":"JavaScript学习","permalink":"http://yoursite.com/categories/JavaScript学习/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"js对象 学习笔记（2）","slug":"js对象 学习笔记（2）","date":"2019-10-06T13:55:06.000Z","updated":"2019-10-07T07:03:50.451Z","comments":true,"path":"2019/10/06/js对象 学习笔记（2）/","link":"","permalink":"http://yoursite.com/2019/10/06/js对象 学习笔记（2）/","excerpt":"JavaScript 对象访问器（Getter 和 Setter）Getter 和 Setter与函数相比的优点： 它提供了更简洁的语法（Getter 和 Setter使用属性形式访问对象方法，不用加括号）","text":"JavaScript 对象访问器（Getter 和 Setter）Getter 和 Setter与函数相比的优点： 它提供了更简洁的语法（Getter 和 Setter使用属性形式访问对象方法，不用加括号） 它允许属性和方法的语法相同 它可以确保更好的数据质量 有利于后台工作 Getter（get 关键词）12345678910111213141516171819202122&lt;body&gt;&lt;p&gt;Getter 和 Setter 允许您通过方法获取和设置属性。&lt;/p&gt;&lt;p&gt;此示例使用 lang 属性来获取语言属性的值。&lt;/p&gt;&lt;p id=\"demo\"&gt;&lt;/p&gt;&lt;script&gt;// 创建对象：var person = &#123; firstName: \"Bill\", lastName : \"Gates\", language : \"en\", get lang() &#123; return this.language; &#125;&#125;;// 使用 getter 显示来自对象的数据：document.getElementById(\"demo\").innerHTML = person.lang;&lt;/script&gt;&lt;/body&gt; 完整例子 Setter（set 关键词）1234567891011121314var person = &#123; firstName: \"Bill\", lastName : \"Gates\", language : \"\", set lang(lang) &#123; this.language = lang; &#125;&#125;;// 使用 setter 来设置对象属性：person.lang = \"en\";// 显示来自对象的数据：document.getElementById(\"demo\").innerHTML = person.language; 完整例子 JavaScript 函数与 Getter的访问方法不同例子1使用函数： 12345678910var person = &#123; firstName: \"Bill\", lastName : \"Gates\", fullName : function() &#123; return this.firstName + \" \" + this.lastName; &#125;&#125;;// 使用方法来显示来自对象的数据：document.getElementById(\"demo\").innerHTML = person.fullName(); 例子2使用Getter： 12345678910var person = &#123; firstName: \"Bill\", lastName : \"Gates\", get fullName() &#123; return this.firstName + \" \" + this.lastName; &#125;&#125;;// 使用 getter 来显示来自对象的数据：document.getElementById(\"demo\").innerHTML = person.fullName; 总结： 例子 1 以函数形式访问 fullName：person.fullName()。 例子 2 以属性形式访问 fullName：person.fullName。 第二个例子提供了更简洁的语法。 JavaScript 对象构造器总结 用大写首字母对构造器函数命名是个好习惯。 123456function Person(first, last, age, eye) &#123; this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eye;&#125; 给已有对象添加属性： 1对象名.新属性名=\"新属性值\" 给已有对象添加新方法: 1对象名.新方法名=function()&#123;函数内容&#125; 给构造器添加新属性: 方法1：回到构造器函数中进行增加。 方法2：构造器名.prototype.新属性名=&quot;新属性值&quot; 给构造器添加新方法： 方法1：回到构造器函数中进行增加。 方法2：构造器名.prototype.新方法名=function(){函数内容} 对象类型（蓝图）（类） 在上面的例子中，函数 Person() 就是对象构造器函数。 通过 new 关键词调用构造器函数可以创建相同类型的对象：12var myFather = new Person(\"Bill\", \"Gates\", 62, \"blue\");var myMother = new Person(\"Steve\", \"Jobs\", 56, \"green\"); 完整例子 this 关键词 在 JavaScript 中，被称为 this 的事物是代码的“拥有者”。 this 的值，在对象中使用时，就是对象本身。 在构造器函数中，this 是没有值的。它是新对象的替代物。 当一个新对象被创建时，this 的值会成为这个新对象。 请注意 this 并不是变量。它是关键词。您无法改变 this 的值。 为(已有)对象添加属性新属性被添加到 myFather。不是 myMother，也不是任何其他 person 对象。 1myFather.nationality = \"English\"; 为(已有)对象添加方法新方法被添加到 myFather。不是 myMother，也不是任何其他 person 对象。 123myFather.name = function () &#123; return this.firstName + \" \" + this.lastName;&#125;; 为构造器添加属性 为(已有)对象添加新属性与新方法都很简单，但与他们不同，为对象构造器添加新属性必须添加到构造器函数内（错误示范：像Person.nationality = &quot;English&quot;;这样会undefined） 1234567function Person(first, last, age, eyecolor) &#123; this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eyecolor; this.nationality = \"English\";&#125; 这样对象属性就可以拥有默认值。 完整例子 为构造器添加方法 同样无法为对象构造器添加新方法，必须在构造器函数内部向一个对象添加方法：12345678910111213141516171819202122232425&lt;p id=\"demo\"&gt;&lt;/p&gt;&lt;script&gt;// Person 对象的构造器函数function Person(firstName,lastName,age,eyeColor) &#123; this.firstName = firstName; this.lastName = lastName; this.age = age; this.eyeColor = eyeColor; //在构造器函数内部向一个对象添加方法 this.changeName = function (name) &#123; //changeName() 函数把 name 赋值给 person 的 lastName 属性 this.lastName = name; &#125;&#125;// 创建 Person 对象var myFriend = new Person(\"Bill\",\"Gates\",62,\"green\");// 修改姓氏myFriend.changeName(\"Jobs\");// 显示姓氏document.getElementById(\"demo\").innerHTML =\"My friend's last name is \" + myFriend.lastName;&lt;/script&gt; 完整例子 内建 JavaScript 构造器Math() 对象不算，Math 是全局对象。new 关键词不可用于 Math。 12345678var x1 = &#123;&#125;; // 新对象var x2 = \"\"; // 新的原始字符串var x3 = 0; // 新的原始数值var x4 = false; // 新的原始逻辑值var x5 = []; // 新的数组对象var x6 = /()/ // 新的正则表达式对象var x7 = function()&#123;&#125;; // 新的函数对象var x8 = new Date(); // 一个新的 Date 对象 完整例子 JavaScript 对象原型所有 JavaScript 对象都从原型继承属性和方法。 原型继承 日期对象继承自 Date.prototype。 数组对象继承自 Array.prototype。 Person 对象继承自 Person.prototype。 Object.prototype 位于原型继承链的顶端：日期对象、数组对象和 Person 对象都继承自 Object.prototype。 使用 prototype 属性为对象构造器添加新属性/方法注意：请只修改自己的原型。绝不要修改标准 JavaScript 对象的原型。 为对象构造器添加新属性：1234567function Person(first, last, age, eyecolor) &#123; this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eyecolor;&#125;Person.prototype.nationality = \"English\"; 完整例子 为对象构造器添加新方法：123456789function Person(first, last, age, eyecolor) &#123; this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eyecolor;&#125;Person.prototype.name = function() &#123; return this.firstName + \" \" + this.lastName;&#125;; 完整例子","categories":[{"name":"JavaScript学习","slug":"JavaScript学习","permalink":"http://yoursite.com/categories/JavaScript学习/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"hexo中hipaper主题——解决小火箭被目录覆盖问题","slug":"解决小火箭被目录覆盖问题","date":"2019-10-05T10:29:00.000Z","updated":"2019-10-05T10:51:10.641Z","comments":true,"path":"2019/10/05/解决小火箭被目录覆盖问题/","link":"","permalink":"http://yoursite.com/2019/10/05/解决小火箭被目录覆盖问题/","excerpt":"出问题页面F12 发现目录覆盖小火箭","text":"出问题页面F12 发现目录覆盖小火箭 找出样式表 通过style.css找到样式表位置在css文件夹里 全局搜索找到toc-fixed全局搜索真的很重要！一开始在style.styl里面搜索了好久都找不到 打开E:\\Program Files\\Hexo\\themes\\hipaper\\source\\css 在css文件夹内空白处右键打开vscode 点击左边放大镜图标，全局搜索toc-fixed 发现我们要修改的实际上在E:\\Program Files\\Hexo\\themes\\hipaper\\source\\css\\ partial\\article.styl里面 修改为width: 350px !important; 发现小火箭不会被覆盖了","categories":[{"name":"hexo中遇到过的问题与解决方案","slug":"hexo中遇到过的问题与解决方案","permalink":"http://yoursite.com/categories/hexo中遇到过的问题与解决方案/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"hipaper","slug":"hipaper","permalink":"http://yoursite.com/tags/hipaper/"}]},{"title":"js对象 学习笔记（1）","slug":"js对象 学习笔记（1）","date":"2019-10-03T12:31:00.000Z","updated":"2019-10-07T07:03:24.094Z","comments":true,"path":"2019/10/03/js对象 学习笔记（1）/","link":"","permalink":"http://yoursite.com/2019/10/03/js对象 学习笔记（1）/","excerpt":"对象 在 JavaScript 中，几乎“所有事物”都是对象。所有 JavaScript 值，除了原始值，都是对象。","text":"对象 在 JavaScript 中，几乎“所有事物”都是对象。所有 JavaScript 值，除了原始值，都是对象。 布尔是对象（如果用 new 关键词定义） 数字是对象（如果用 new 关键词定义） 字符串是对象（如果用 new 关键词定义） 日期永远都是对象 算术永远都是对象 正则表达式永远都是对象 数组永远都是对象 函数永远都是对象 对象永远都是对象 原始值 原始值指的是没有属性或方法的值。 原始数据类型指的是拥有原始值的数据。 JavaScript 定义了 5 种原始数据类型： string number boolean null undefined 原始值是一成不变的（它们是硬编码的，因此不能改变）。 假设 x = 3.14，您能够改变 x 的值。但是您无法改变 3.14 的值。 对象定义 对象是包含变量的变量 JavaScript 对象是命名值的集合。 对象也是变量。但是对象能够包含很多值。 值按照名称 : 值对的形式编写（名称和值以冒号分隔）。1var person = &#123;firstName:\"Bill\", lastName:\"Gates\", age:62, eyeColor:\"blue\"&#125;; 对象属性 属性指的是与 JavaScript 对象相关的值。 JavaScript 对象是无序属性的集合。 属性通常可以被修改、添加和删除，但是某些属性是只读的。 firstName、lastName、age、eyeColor就是属性。 访问对象属性的两种方法 您可以使用 .property (例子1 )或[&quot;property&quot;]( 例子2) JavaScript for…in 循环JavaScript for…in 语句遍历对象的属性。 123for (variable in object) &#123; 要执行的代码&#125; for…in 循环中的代码块会为每个属性执行一次。 1234567891011121314151617&lt;body&gt;&lt;h1&gt;JavaScript 对象属性&lt;/h1&gt;&lt;p id=\"demo\"&gt;&lt;/p&gt;&lt;script&gt;var txt = \"\";var person = &#123;fname:\"Bill\", lname:\"Gates\", age:62&#125;; var x;for (x in person) &#123; txt += person[x] + \" \";&#125;document.getElementById(\"demo\").innerHTML = txt;&lt;/script&gt;&lt;/body&gt; 在这里，x依次是fname、lname、age。 例子运行效果 添加新属性 可以通过简单的赋值，向已存在的对象添加新属性。 不能使用预留词作为属性名（或方法名）。请使用 JavaScript 命名规则。1person.nationality = \"English\"; 完整例子 删除属性 delete 关键词会同时删除属性的值和属性本身。 删除完成后，属性在被添加回来之前是无法使用的。 delete 操作符被设计用于对象属性。它对变量或函数没有影响。 delete 操作符不应被用于预定义的 JavaScript 对象属性。这样做会使应用程序崩溃。12var person = &#123;firstName:\"Bill\", lastName:\"Gates\", age:62, eyeColor:\"blue\"&#125;;delete person.age; // 或 delete person[\"age\"]; 完整例子 JavaScript 对象继承了它们的原型的属性。 delete 关键词不会删除被继承的属性，但是如果您删除了某个原型属性，则将影响到所有从原型继承的对象。 对象方法 方法是可以在对象上执行的动作。 对象属性可以是原始值、其他对象以及函数。 对象方法是包含函数定义的对象属性。 属性 值 firstName Bill fullName function() {return this.firstName + “ “ + this.lastName;} this 关键词 在 JavaScript 中，被称为 this 的事物，指的是拥有该 JavaScript 代码的对象。 this 的值，在函数中使用时，是“拥有”该函数的对象。 请注意 this 并非变量。它是关键词。您无法改变 this 的值。 创建与访问对象方法 创建对象方法： 1methodName : function() &#123; 代码行 &#125; 访问对象方法： 1objectName.methodName() 此例访问 person 对象的 fullName() 方法：例子 如果访问 fullName 属性时没有使用 ()，则将返回函数定义：例子 使用内建方法 此例使用 String 对象的 toUpperCase() 方法，把文本转换为大写：12var message = \"Hello world!\";var x = message.toUpperCase(); x 的值，在以上代码执行后将是： 1HELLO WORLD! 添加新的方法向对象添加方法是在构造器函数内部完成的：(更多相关知识在js对象 学习笔记（2）中的“JavaScript 对象构造器”内) 123456789function person(firstName, lastName, age, eyeColor) &#123; this.firstName = firstName; this.lastName = lastName; this.age = age; this.eyeColor = eyeColor; this.changeName = function (name) &#123; this.lastName = name; &#125;;&#125; changeName() 函数 name 的值赋给了 person 的 lastName 属性。 1myMother.changeName(\"Jobs\"); 完整例子 通过用 myMother “替代” this。 this 的值，在对象中使用时，就是对象本身。 在构造器函数中，this 是没有值的。它是新对象的替代物。 当一个新对象被创建时，this 的值会成为这个新对象。","categories":[{"name":"JavaScript学习","slug":"JavaScript学习","permalink":"http://yoursite.com/categories/JavaScript学习/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"AJAX异步更新","slug":"AJAX异步更新","date":"2019-10-02T12:10:37.000Z","updated":"2019-10-02T12:17:44.771Z","comments":true,"path":"2019/10/02/AJAX异步更新/","link":"","permalink":"http://yoursite.com/2019/10/02/AJAX异步更新/","excerpt":"什么是 AJAX ？ AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 AJAX 不是新的编程语言，而是一种使用现有标准的新方法。 AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。","text":"什么是 AJAX ？ AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 AJAX 不是新的编程语言，而是一种使用现有标准的新方法。 AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。 步骤 创建对象：通过检测window对象是否有XMLHttpRequest属性来判断浏览器是否支持标准的XMLHttpRequest，创建XMLHttpRequest对象（不支持则创建ActiveXObject对象）。 判断对象状态：通过XMLHttpRequest的onreadystatechange属性（以及readyState还有status属性）判断对象状态（请求是否初始化、服务器连接是否建立、请求是否接收、请求是否处理中、请求是否已完成且响应已就绪）。 判断到“请求已完成且响应已就绪”时执行函数：直到判断出服务器响应已做好被处理的准备时就使用XMLHttpRequest 对象（或者ActiveXObject对象）的 responseText 或 responseXML 属性来获得响应数据。 向服务器发送请求：使用XMLHttpRequest 对象（或者ActiveXObject对象）的 open() 和 send() 方法向服务器发送请求。 12345678910111213141516171819202122232425262728293031323334353637&lt;html&gt;&lt;head&gt;&lt;script type=\"text/javascript\"&gt;function loadXMLDoc()&#123;var xmlhttp;//1.创建XMLHttpRequest对象if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125;//2.每当XMLHttpRequest对象状态发生变化时，调用onreadystatechange属性xmlhttp.onreadystatechange=function() &#123;//3.通过readyState和status判断请求是否初始化等（具体看readyState参数值） if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123;//4.判断出“请求已完成，且响应已就绪”时, //通过responseText属性获取来自服务器响应的数据 document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText; &#125; &#125;//5.向服务器发送请求xmlhttp.open(\"GET\",\"/ajax/test1.txt\",true);xmlhttp.send();&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"myDiv\"&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;&lt;button type=\"button\" onclick=\"loadXMLDoc()\"&gt;通过 AJAX 改变内容&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 原链接 使用多个AJAX任务的步骤 如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。 该函数调用应该包含 URL (发送请求时open方法的参数url)以及发生 onreadystatechange 事件（发生状态变化）时执行的任务（每次调用可能不尽相同） 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt;&lt;head&gt;&lt;script type=\"text/javascript\"&gt;var xmlhttp;//标准函数loadXMLDocfunction loadXMLDoc(url,cfunc)&#123;//1.判断是否含有XMLHttpRequest属性，创建对象if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125;//2.每当 XMLHttpRequest对象状态发生改变时，就会调用onreadystatechange（也就是cfunc）xmlhttp.onreadystatechange=cfunc;//4.向服务器发送请求xmlhttp.open(\"GET\",url,true);xmlhttp.send();&#125;function myFunction()&#123;loadXMLDoc(\"/ajax/test1.txt\",function() &#123;//3.调用标准函数，把url传入并编写标准函数中的cfunc（即：每当XMLHttpRequest对象状态发生改变时会调用的函数） if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText; &#125; &#125;);&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"myDiv\"&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;&lt;button type=\"button\" onclick=\"myFunction()\"&gt;通过 AJAX 改变内容&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 原链接 AJAX 的基础：XMLHttpRequest XMLHttpRequest 对象用于和服务器交换数据。 创建 XMLHttpRequest 对象 所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。 但是老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象. 所以为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ： 123456789var xmlhttp;if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest();//创建 XMLHttpRequest 对象 &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");//创建ActiveX 对象 &#125; 通过检测window对象是否有XMLHttpRequest属性来确定浏览器是否支持标准的XMLHttpRequest。注意，不要根据浏览器的navigator.userAgent来检测浏览器是否支持某个JavaScript特性，一是因为这个字符串本身可以伪造，二是通过IE版本判断JavaScript特性将非常复杂。 向服务器发送请求 如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：12xmlhttp.open(\"GET\",\"test1.txt\",true);xmlhttp.send(); 方法 描述 open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。 method:请求的类型,GET 或 POSTurl:文件在服务器上的位置async:true（异步）或 false（同步）,默认true，可不写 send(string) 将请求发送到服务器。string:仅用于 POST 请求 最后调用send()方法才真正发送请求。GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去。 注意，千万不要把第三个参数指定为false，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。 GET 还是 POST？ 与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。 然而，在以下情况中，请使用 POST 请求： 无法使用缓存文件（更新服务器上的文件或数据库） 向服务器发送大量数据（POST 没有数据量限制） 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠 注意区分:表单中的method属性值默认GET，推荐使用 POST（更加安全）。 GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去。 服务器响应如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。 属性 描述 responseText 获得字符串形式的响应数据 responseXML 获得 XML 形式的响应数据 responseText属性使用方法：1document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText; responseXML 属性使用方法 如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性： 请求 books.xml 文件，并解析响应： 12345678xmlDoc=xmlhttp.responseXML;txt=\"\";x=xmlDoc.getElementsByTagName(\"ARTIST\");for (i=0;i&lt;x.length;i++) &#123; txt=txt + x[i].childNodes[0].nodeValue + \"&lt;br /&gt;\"; &#125;document.getElementById(\"myDiv\").innerHTML=txt; 完整例子 onreadystatechange 事件 每当 readyState 改变时，就会触发 onreadystatechange 事件。 readyState 属性存有 XMLHttpRequest 的状态信息。 下面是** XMLHttpRequest 对象的三个重要的属性**： 属性 描述 onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪 status 200: “OK” ；404: 未找到页面 在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。 当 readyState 等于 4 且状态为 200 时，表示响应已就绪。 使用 Callback 函数 callback 函数是一种以参数形式传递给另一个函数的函数。 如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。 该函数调用应该包含 URL (发送请求时open方法的参数url)以及发生 onreadystatechange 事件（发生状态变化）时执行的任务（每次调用可能不尽相同） 函数调用： 1234567891011function myFunction()&#123;//调用标准函数，把url传入并编写标准函数中的cfunc（即：每当readyState 属性改变时会调用的函数）loadXMLDoc(\"/ajax/test1.txt\",function() &#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText; &#125; &#125;);&#125; 被调用的标准的函数： 1234567891011121314151617function loadXMLDoc(url,cfunc)&#123;//判断是否含有XMLHttpRequest属性，创建对象if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125;//每当 readyState 属性改变时，就会调用onreadystatechange（也就是cfunc）xmlhttp.onreadystatechange=cfunc;//向服务器发送请求xmlhttp.open(\"GET\",url,true);xmlhttp.send();&#125; 例子 廖雪峰关于AJAX的文章","categories":[{"name":"AJAX学习","slug":"AJAX学习","permalink":"http://yoursite.com/categories/AJAX学习/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"http://yoursite.com/tags/AJAX/"}]},{"title":"JS中的同步与异步","slug":"js同步与异步","date":"2019-10-01T10:00:05.000Z","updated":"2019-10-02T12:18:14.002Z","comments":true,"path":"2019/10/01/js同步与异步/","link":"","permalink":"http://yoursite.com/2019/10/01/js同步与异步/","excerpt":"作用域 作用域就是代码的执行环境，全局执行环境就是全局作用域，函数的执行环境就是私有作用域，它们都是栈内存。总的来说，作用域就是代码执行时开辟的栈内存。","text":"作用域 作用域就是代码的执行环境，全局执行环境就是全局作用域，函数的执行环境就是私有作用域，它们都是栈内存。总的来说，作用域就是代码执行时开辟的栈内存。 总结 描述 私有作用域 函数执行都会形成一个私有作用域 全局作用域 页面一打开就会形成一个全局的作用域 私有变量 在私有作用域里边形成的变量 (通过 var 声明； 形参) 全局变量 在全局作用域形成的变量（var a = 12 或者函数内没有声明，直接赋值的变量） 某个执行环境中所有的代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出时，如关闭浏览器或网页，才会被销毁） 每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将被环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。 作用域链 当代码在一个环境中执行时，会创建变量对象的一个作用域链（作用域形成的链条） 作用域链的前端，始终都是当前执行的代码所在环境的变量对象 作用域链中的下一个对象来自于外部环境，而在下一个变量对象则来自下一个外部环境，一直到全局执行环境 全局执行环境的变量对象始终都是作用域链上的最后一个对象 内部环境可以通过作用域链访问所有外部环境，但外部环境不能访问内部环境的任何变量和函数。 所以执行函数时，作用域链是从内到外来排序的。（有形参找形参，没有才找外部的全局变量） 形参与实参 参数 概念 形参（形式参数） 是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传递的参数。 实参（实际参数） 是在调用时传递给函数的参数，即传递给被调用函数的值。 形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量。（随着函数被调用而新建，随着函数销毁而销毁） 函数调用中发生的数据传送是单向的，即只能把实参的值传给形参，而不能把形参的值传给实参。因此，在函数调用的过程中，形参的值可以改变，而实参的值则不会变化。 参考 执行栈例子注意：执行函数时，作用域链是从内到外来排序的。（有形参找形参，没有才找外部的全局变量） 1234567var count = 0;function foo(count) &#123;//count形参 count += 1;//私有变量count console.log(count);//私有变量count&#125;foo(count); // 1 count实参foo(count); // 1 函数的形参属于函数执行上下文，所以当指定这个形参后，它就随着函数被调用而新建，随着函数销毁而销毁。 指定了这个形参，调用函数时传递进来的实参count（0）会沿着作用域链找到私有变量 count（接下来的操作都在私有变量上进行），而不是全局变量count。 步骤我们用执行栈来理解一下 函数每次被调用都会产生新的执行上下文（私有变量 count），实参count（全局变量count）的数据（0）被传入函数，私有变量 count变为0，并被压入执行栈，执行完毕后输出1，当前上下文接着被弹出执行栈，私有变量 count被销毁。 再次调用时又随着函数被调用而新建私有变量 count，重复第一步。 （函数内的操作都在私有变量身上进行，随着私有变量的销毁上一次的操作就没了）所以第一次调用应该返回 1，第二次调用也应该返回 1，第 n 次调用都应该返回 1。 1234567var count = 0;function foo() &#123; count += 1;//全局变量count console.log(count);//全局变量count&#125;foo(count); // 1foo(count); // 2 函数的形参属于函数执行上下文，所以当指定这个形参后，它就随着函数被调用而新建，随着函数销毁而销毁。如果不指定这个形参，实参count（0）传进函数以后找不到形参就会沿着作用域链找到全局变量 count，它属于全局执行上下文，这个时候再去调用 foo() 函数就会读写这个全局变量（也就是函数里的所有操作都是在全局变量上进行的）。 全局变量不会随着函数的调用而新建，也不会随着函数的销毁而销毁。 每个 foo() 函数调用后，给 count（全局变量） 加一，然后被弹出执行栈，而全局执行上下文的生命周期将伴随着整个程序，所以第一次调用打印 1，第二次调用打印 2，第 n 次调用打印 n。 js的异步机制 同步任务进入总线程，异步任务不会进入主线程，而是会先进入任务队列，任务队列其实是一个先进先出的数据结构，也是一个事件队列。 比如说文件读取操作，因为这是一个异步任务，因此该任务会被添加到任务队列中，等到IO（输入输出）完成后，就会在任务队列中添加一个事件，表示异步任务完成啦，可以进入执行栈啦~但是这时候呀，主线程不一定有空，当主线程处理完其它任务有空时，就会读取任务队列，读取里面有哪些事件，排在前面的事件会被优先进行处理，如果该任务指定了回调函数，那么主线程在处理该事件时，就会执行回调函数中的代码，也就是执行异步任务啦 单线程从从任务队列中读取任务是不断循环的，每次栈被清空后，都会在任务队列中读取新的任务，如果没有任务，就会等到，直到有新的任务，这就叫做任务循环，因为每个任务都是由一个事件触发的，因此也叫作事件循环。 步骤总结： 所有同步任务都在主线程上执行，行成一个执行栈 主线程之外，还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件 一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面还有哪些事件，那些对应的异步任务，于是结束等待状态，（异步任务）进入执行栈，开始执行 主线程不断的重复上面的第三步 js的异步编程回调函数 AJAX Promise js中的同步与异步 理解 JavaScript 执行栈 作用域","categories":[{"name":"JavaScript学习","slug":"JavaScript学习","permalink":"http://yoursite.com/categories/JavaScript学习/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"百度前端技术学院 第四天学习笔记（1）（CSS背景）","slug":"百度前端技术学院 第四天学习笔记（1）","date":"2019-09-26T07:47:25.000Z","updated":"2019-10-11T06:59:28.393Z","comments":true,"path":"2019/09/26/百度前端技术学院 第四天学习笔记（1）/","link":"","permalink":"http://yoursite.com/2019/09/26/百度前端技术学院 第四天学习笔记（1）/","excerpt":"补充：margin和padding的区别 在CSS中margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。 在CSS中padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内边距。","text":"补充：margin和padding的区别 在CSS中margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。 在CSS中padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内边距。 特别注意 background内如果想要放background-size的值呢就必须有position的值才行 参考MDN并且，&lt;background-size&gt;值只能紧接在&lt;position&gt;后面，并以/字符分隔，例如：“ left/cover”。 不起作用： 1background: url(上校.jpg) cover no-repeat fixed; 起作用： 1background: url(上校.jpg) left/cover no-repeat fixed; 1background: url(上校.jpg) no-repeat fixed; 背景background总结 为了清晰地显示出段落和链接的背景图像，需要为它们设置了少许内边距（padding），外边距（margin）是没用的。 【推荐使用】background简写所有背景属性编写background值时，需要遵循一些规则例如： background-color只能在最后一个逗号后指定。 background-size只能紧随在background-position后并以/字符分隔，如下所示：center/80%。 所有注意事项 概述1234body &#123; background : #00FF00 url(bgimage.gif) no-repeat fixed top; &#125; 通常建议使用这个属性，而不是分别使用单个属性，因为这个属性在较老的浏览器中能够得到更好的支持。 注意：属性值之间使用空格分隔开。如果使用多个背景，则需要为第一个背景指定所有属性，然后在逗号后添加下一个背景。 如果不设置其中的某个值，也不会出问题，所有省略的子值都将设置为其初始值。 可以设置如下属性： background-color background-position background-size background-repeat background-origin background-clip background-attachment background-image 例子123456.box &#123; background : linear-gradient(105deg, rgba(255,255,255,.2) 39%, rgba(51,56,57,1) 96%) center 400px 200px no-repeat,/*渐变*/ url(big-star.png) center no-repeat, /*background-size（400px 200px）只能紧随在background-position（center）后并以'/'字符分隔*/ purple;/*紫色背景色要放在最后*/&#125; background-color属性设置背景颜色1background-color: gray; 补充： rgba颜色中Alpha为色彩空间，也就是透明度/不透明度。它的范围为0.0到1.0之间，0.5为半透明。 rgba(255,255,255,0)则表示完全透明的白色； rgba(0,0,0,1)则表示完全不透明的黑色； background-image属性设置背景图片12background-image:url(C:/Users/HLZ/Desktop/百度前端/上校.jpg);padding: 20px; 如果除了背景图像之外还指定了背景色，则图像会显示在该颜色的顶部: 1234.b &#123; background-image: url(star.png); background-color:red;&#125; background-size属性设置背景图片大小 background-size: length|percentage|cover|contain 属性值为length用法 设置背景图像的高度和宽度。 第一个值设置宽度，第二个值设置高度。 如果只设置一个值，则第二个值会被设置为 “auto”。123background-size:100px； //背景图片显示的宽为100像素background-size:100px 160px；//背景图片显示的宽为100像素，高为600像素 属性值为percentage用法 以父元素的百分比来设置背景图像的宽度和高度。 第一个值设置宽度，第二个值设置高度。 如果只设置一个值，则第二个值会被设置为 “auto”。123background-size：60%； //背景图片的显示宽度和高度是图片大小60%；background-size：60% 80%； // 背景图片的显示宽度是图片大小的60%，高度是80%； 属性值为cover用法 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。保留其宽高比。在这种情况下，某些图像可能会出现在盒子外面 背景图像的某些部分也许无法显示在背景定位区域中。 把y轴拉满，x轴够长的话会平铺重复显示图片。 1background-size：cover； //把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。 注意：加上background-attachment: fixed;将图片固定在可视范围内时，图片把x轴拉满（反过来了） 属性值为contain用法 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。浏览器将使图像大小合适以适合框内。 在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能会在图像的两侧或顶部和底部出现间隙。 把x轴拉满，y轴够长的话会平铺重复显示图片。1background-size：contain； //把图像图像扩展至最大尺 注意：加上background-attachment: fixed;将图片固定在可视范围内时，图片把y轴拉满（反过来了），x轴右边可能空缺一部分。 background-repeat属性设置背景重复注意：不设置该属性则默认全屏重复（铺满）。 属性值repeat-x 和 repeat-y 分别导致图像只在水平或垂直方向上重复，no-repeat 则不允许图像在任何方向上平铺。 1background-repeat: repeat-y; background-position属性设置背景定位注意 使用该属性之前需要先设置background-repeat:no-repeat;确保图片不会被铺满整个页面。 位置关键字如果是一对则可以按任何顺序出现。如果是单个关键字和长度/百分比混合使用最好将lefy/right放在长度/百分比左边，将top/bottom放在长度/百分比右边。另，要保证不超过两个关键字(注意是关键字！background-position: top 20px right 10px;表示将背景从顶部放置20px，从右侧放置10px)，一个对应水平方向，另一个对应垂直方向。 属性值可以通过一对或单个关键字、百分数、长度值来给他提供值，如果使用单个则默认另一个关键字是 center。 使用关键字提供属性值 top、bottom、left、right 和 center 123background-image:url(C:/Users/HLZ/Desktop/百度前端/上校.jpg);background-repeat:no-repeat;background-position:top right; 使用百分数值提供属性值 百分数值同时应用于元素和图像 如果只提供一个百分数值，所提供的这个值将用作水平值，垂直值将假设为 50%。这一点与关键字类似。 background-position 的默认值是 0% 0%，在功能上相当于 top left。 123background-image:url(C:/Users/HLZ/Desktop/百度前端/上校.jpg);background-repeat:no-repeat;background-position:50% 50%; 其中心与其元素的中心对齐。也就是说，图像中描述为 50% 50% 的点（中心点）与元素中描述为 50% 50% 的点（中心点）对齐。 如果图像位于 0% 0%，其左上角将放在元素内边距区的左上角。如果图像位置是 100% 100%，会使图像的右下角放在右边距的右下角。 使用长度值提供属性值 还可以使用长度值，如 100px 或 5cm。 长度值解释的是元素内边距区左上角的偏移。偏移点是图像的左上角。 注意，这一点与百分数值不同，因为偏移只是从一个左上角到另一个左上角。也就是说，图像的左上角与 background-position 声明中的指定的点对齐。 123background-image:url(C:/Users/HLZ/Desktop/百度前端/上校.jpg);background-repeat:no-repeat;background-position:50px 100px; 比如，如果设置值为 50px 100px，图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上。 属性值混合使用 将背景从顶部放置20px，从右侧放置10px(只有两个关键词)：12345.box &#123; background-image: url(star.png); background-repeat: no-repeat; background-position: top 20px right 10px; &#125; 长度以及百分比：12345.box &#123; background-image: url(star.png); background-repeat: no-repeat; background-position: 20px 10%; &#125; 将关键字值与长度或百分比混合: 注意：只使用一个关键字的情况最好按照表格顺序，颠倒以后没有效果: 第一个属性值 第二个属性值 lefy/right 长度或百分比 长度或百分比 top/bottom 12345.box &#123; background-image: url(star.png); background-repeat: no-repeat; background-position: 20px bottom;&#125; background-attachment属性固定背景图片（背景关联） 如果文档比较长，那么当文档向下滚动时，背景图像也会随之滚动。当文档滚动到超过图像的位置时，图像就会消失。 通过设置属性值为fixed可以使图像固定。 属性值 fixed：声明图像相对于可视区是固定的，因此不会受到滚动的影响。 scroll：（默认值）也就是说，在默认的情况下，背景会随文档滚动。123456body &#123; background-image url(CUsersHLZDesktop百度前端上校.jpg); background-size 200px; background-repeat no-repeat; background-attachment fixed;&#125; 多个背景图像 在一个属性中可以指定多个值，并用逗号分隔每个值。 注意：可能最终得到彼此重叠的背景图像。背景将分层，最后列出的背景图像位于堆栈底部，而每个先前的图像堆栈均位于代码后的背景图像的顶部。 123background-image url(image1.png), url(image2.png), url(image3.png), url(image1.png);background-repeat no-repeat, repeat-x, repeat;background-position 10px 20px, top right; 不同属性的每个值将与其他属性中相同位置的值匹配。例如，在上面image1的background-repeat值将为no-repeat。 当不同的属性具有不同数量的值时,数量较少的值会循环,在上面的示例中，有四个背景图像，但只有两个background-position值。前两个位置值将应用于前两个图像，然后它们将再次循环返回(image3将获得第一个位置值，并将image4获得第二个位置值。) 例子最后列出的背景图像位于堆栈底部，而每个先前的图像堆栈均位于代码后的背景图像的顶部： 123.box &#123; background-image url(star.png), url(big-star.png);&#125; 123div class=wrapper div class=boxdivdiv 123.box &#123; background-imageurl(big-star.png), url(star.png);&#125; MDN参考","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"百度前端技术学院 第三天学习总结（CSS文本）（2）","slug":"百度前端技术学院 第三天学习总结（CSS文本） 2","date":"2019-09-25T05:30:16.000Z","updated":"2019-10-11T01:41:28.198Z","comments":true,"path":"2019/09/25/百度前端技术学院 第三天学习总结（CSS文本） 2/","link":"","permalink":"http://yoursite.com/2019/09/25/百度前端技术学院 第三天学习总结（CSS文本） 2/","excerpt":"派生(上下文)选择器非常重要！ 如果希望列表中的 strong 元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器：","text":"派生(上下文)选择器非常重要！ 如果希望列表中的 strong 元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器： 1234li strong &#123; font-style: italic;/*斜体*/ font-weight: normal; &#125; 对下面strong元素起作用： 1&lt;li&gt;&lt;strong&gt;我是斜体字。这是因为 strong 元素位于 li 元素内。&lt;/strong&gt;&lt;/li&gt; 只有 li 元素中的 strong 元素的样式为斜体字，无需为 strong 元素定义特别的 class 或 id，代码更加简洁。 id 选择器和派生选择器12345#sidebar p &#123; font-style: italic; text-align: right; margin-top: 0.5em; &#125; 上面的样式只会应用于出现在 id 是 sidebar 的元素内的段落。 这个元素很可能是 div 或者是表格单元，尽管它也可能是一个表格或者其他块级元素。它甚至可以是一个内联元素，比如&lt;em&gt;&lt;/em&gt; 或者 &lt;span&gt;&lt;/span&gt;，不过这样的用法是非法的,因为 不可以在内联元素 &lt;span&gt; 中嵌入&lt;p&gt;(原因) 即使被标注为 sidebar 的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次：1234567891011121314#sidebar p &#123; font-style: italic; text-align: right; margin-top: 0.5em; &#125;#sidebar h2 &#123; font-size: 1em; font-weight: normal; font-style: italic; margin: 0; line-height: 1.5; text-align: right; &#125; class 也可被用作派生选择器1234.fancy td &#123; color: #f60; background: #666; &#125; 在上面这个例子中，类名为 fancy 的更大的元素内部的表格单元都会以灰色背景显示橙色文字。（名为 fancy 的更大的元素可能是一个表格或者一个 div）反过来，元素也可以基于它们的类而被选择：（要注意包含关系，前包含后） 1234td.fancy &#123; color: #f60; background: #666; &#125; 在上面的例子中，类名为 fancy 的表格单元将是带有灰色背景的橙色。 1&lt;td class=\"fancy\"&gt; 选择器的分组你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。 用逗号将需要分组的选择器分开。 在下面的例子中，我们对所有的标题元素进行了分组。所有的标题元素都是绿色的。 123h1,h2,h3,h4,h5,h6 &#123; color: green; &#125; 文本样式都有哪些相关属性，对应哪些值“color 属性”设置字体颜色 color 属性设置选中元素的前景内容的颜色 (通常指文本，不过也包含一些其他东西，或者是使用 text-decoration 属性放置在文本下方或上方的线 (underline overline)。 “font-size属性”设置字体大小 千万注意 数字与单位之间不要有空 格！ 使用rem更加便于以后的维护 需要注意的是rem不支持 Internet Explorer 8 和以下的版本。如果你的项目需要支持较老的浏览器，你可以坚持使用em 或 px。 需要先设置html的字体大小（ 1rem 等于 HTML 中的根元素的字体大小），设置为10px将便于后面的计算。12345678910111213html &#123; font-size: 10px;//1em=10px&#125;h1 &#123; font-size: 2.6rem;//26px&#125;p &#123; font-size: 1.4rem;//14px color: red; font-family: Helvetica, Arial, sans-serif;&#125; “font-family属性”设置字体样式 使用字体栈并且将字体栈的最后一个值设置为网络安全字体（通用字体）。 123p &#123; font-family: \"Trebuchet MS\", Verdana, sans-serif;&#125; 注意: 有一些字体名称不止一个单词，比如Trebuchet MS ，那么就需要用引号包裹。 “text-decoration属性”非常有趣可用于在设置链接时取消设置链接上的默认下划线。 可用值为： none: 取消已经存在的任何文本装饰。 underline: 文本下划线. overline: 文本上划线 line-through: 穿过文本的线 注意到 text-decoration 可以一次接受多个值.同时注意 text-decoration 是一个缩写形式，它由 text-decoration-line, text-decoration-style 和 text-decoration-color 构成。 123.la&#123; text-decoration: wavy line-through red;&#125; text-decoration-style属性值的选择参考 “line-height 属性”设置行高 推荐使用数字作为无单位的属性值，无单位的值乘以 font-size 来获得 line-height。1line-height: 1.5; “text-indent 属性”设置首行文本缩进 规定文本块中首行文本的缩进。 注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。 例子1234p&#123;text-indent:50px;&#125;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"百度前端技术学院 第三天学习总结（CSS文本）（1）","slug":"百度前端技术学院 第三天学习总结（CSS文本）","date":"2019-09-25T03:36:16.000Z","updated":"2019-10-11T01:17:52.315Z","comments":true,"path":"2019/09/25/百度前端技术学院 第三天学习总结（CSS文本）/","link":"","permalink":"http://yoursite.com/2019/09/25/百度前端技术学院 第三天学习总结（CSS文本）/","excerpt":"补充：HTML知识title 属性 规定关于元素的额外信息。 这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）。 提示：title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。","text":"补充：HTML知识title 属性 规定关于元素的额外信息。 这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）。 提示：title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。 p标签的嵌套 内联元素可以嵌套内联元素，块级元素可以嵌套部分块级元素并也能嵌套内联元素，但内联元素不能嵌套块级元素。块级元素为block，内联元素为inline，拥有“inline”特性的同时又拥有“block”的特性称为replace元素。 在&lt;p&gt;元素中是不能嵌套&lt;div&gt;元素的，在&lt;p&gt;标签还没结束时，遇到下一个块级元素就会自动结束。 什么是CSSCSS 指层叠样式表 (Cascading Style Sheets)，样式表中的样式定义如何显示 HTML 元素，存储在 CSS 文件中的外部样式表可以极大提高工作效率。 CSS是如何工作的解释1(来自MDN)（具体可以参考这个链接有实际的转换例子） 浏览器加载HTML 浏览器将HTML转换为DOM 浏览器获取HTML文档链接的大多数资源以及CSS（在此过程只呢个稍后会处理JS） 浏览器解析提取的CSS，并根据选择器类型分到不同的“存储桶”，例如元素，类，ID等。根据找到的选择器，它确定应将哪些规则应用于DOM中的哪些节点，并根据需要向其附加样式（此中间步骤称为渲染树）。 将渲染树放置在规则应用到其后应出现的结构中。（放在合适的HTML元素中） 页面的视觉显示在屏幕上显示（此阶段称为绘画）。 解释2（比较好理解）参考(里面有详细的图片解释) 处理 HTML 标记并构建 DOM 树。 处理 CSS 标记并构建 CSSOM 树。 将 DOM 与 CSSOM 合并成一个渲染树。 根据渲染树来布局，以计算每个节点的几何信息。 将各个节点绘制到屏幕上。 补充：DOMDOM具有树状结构。标记语言中的每个元素，属性和一段文本都成为树结构中的DOM节点。 CSS的基本语法是怎样的参考图 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。 选择器通常是您需要改变样式的** HTML 元素**。 每条声明由一个属性和一个值组成。 多条声明中间用分号隔开。 1234选择器 &#123; 属性:值; 属性:值;&#125; 注意：如果值为若干单词，则要给值加引号： 1p &#123;font-family: \"sans serif\";&#125; CSS选择器是什么概念 选择器通常是您需要改变样式的HTML 元素。 简单选择器id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。id 选择器以 “#” 来定义。（id 属性只能在每个 HTML 文档中出现一次。） 类选择器 以一个点号显示 1.center &#123;text-align: center&#125; 在下面的 HTML 代码中，h1 和 p 元素都有 center 类。这意味着两者都将遵守 “.center” 选择器中的规则。 1234567&lt;h1 class=\"center\"&gt;This heading will be center-aligned&lt;/h1&gt;&lt;p class=\"center\"&gt;This paragraph will also be center-aligned.&lt;/p&gt; 注意：类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。 类型（标签名/元素）选择器1234567891011span &#123; background-color: yellow;&#125;strong &#123; color: rebeccapurple;&#125;em &#123; color: rebeccapurple;&#125; 通用选择器用星号（*）表示，并选择文档中的所有内容 123* &#123; margin: 0;&#125; 属性选择器 参考 属性选择器 语法[属性名]{css样式} 可以为拥有指定属性的 HTML 元素设置样式，而不仅限于 class 和 id 属性。 注释：只有在规定了 !DOCTYPE 时，IE7 和 IE8 才支持属性选择器。在 IE6 及更低的版本中，不支持属性选择。 下面的例子为带有 title 属性的所有元素设置样式：1234[title]&#123;color:red;&#125; 属性和值选择器 下面的例子为 title=”W3School” 的所有元素设置样式：1234[title=W3School]&#123;border:5px solid blue;&#125; 属性和值选择器 - 多个值 下面的例子为包含指定值的 title 属性的所有元素设置样式。适用于HTML中由空格分隔的属性值：（比如：HTML中属性值为”hello world”或”student hello”） 1[title~=hello] &#123; color:red; &#125; 下面的例子为带有包含指定值的 lang 属性的所有元素设置样式。适用于HTML中由连字符分隔的属性值：(比如：HTML中属性值为”en-us”或者”en”) 1[lang|=en] &#123; color:red; &#125; [attribute|=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。 [attribute^=value] 匹配属性值以指定值开头的每个元素。 [attribute$=value] 匹配属性值以指定值结尾的每个元素。 [attribute*=value] 匹配属性值中包含指定值的每个元素。 扩展 设置表单的样式的例子 属性选择器在为不带有 class 或 id 的表单设置样式时特别有用： 注意：使用派生选择器时中间的空格是看情况存在的，比如，#sidebar p、li strong、.fancy td中间有空格，而td.fancy、input[type=”text”]中间没有空格。 派生选择器相关知识点在下一篇笔记百度前端技术学院 第三天学习总结（CSS文本）（2）1234567891011121314151617181920212223242526272829&lt;head&gt;&lt;style&gt;input[type=\"text\"]&#123; width:150px; display:block; margin-bottom:10px; background-color:yellow; font-family: Verdana, Arial;&#125;input[type=\"button\"]&#123; width:120px; margin-left:35px; display:block; font-family: Verdana, Arial;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;form name=\"input\" action=\"\" method=\"get\"&gt;&lt;input type=\"text\" name=\"Name\" value=\"Bill\" size=\"20\"&gt;&lt;input type=\"text\" name=\"Name\" value=\"Gates\" size=\"20\"&gt;&lt;input type=\"button\" value=\"Example Button\"&gt;&lt;/form&gt;&lt;/body&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"百度前端技术学院 第三天学习笔记（CSS文本）","slug":"百度前端技术学院 第三天学习笔记（CSS文本）","date":"2019-09-24T03:36:16.000Z","updated":"2019-09-27T06:20:45.952Z","comments":true,"path":"2019/09/24/百度前端技术学院 第三天学习笔记（CSS文本）/","link":"","permalink":"http://yoursite.com/2019/09/24/百度前端技术学院 第三天学习笔记（CSS文本）/","excerpt":"参考 字体颜色 color 属性设置选中元素的前景内容的颜色 (通常指文本，不过也包含一些其他东西，或者是使用 text-decoration 属性放置在文本下方或上方的线 (underline overline)。","text":"参考 字体颜色 color 属性设置选中元素的前景内容的颜色 (通常指文本，不过也包含一些其他东西，或者是使用 text-decoration 属性放置在文本下方或上方的线 (underline overline)。123p &#123; color: red;&#125; 字体大小重点在rem （千万注意数字与单位之间不要有空格！） px (像素) 将像素的值赋予给你的文本。这是一个绝对单位， 它导致了在任何情况下，页面上的文本所计算出来的像素值都是一样的。 em 1em 等于我们设计的当前元素的父元素上设置的字体大小 (更加具体的话，比如包含在父元素中的大写字母 M 的宽度) 如果你有大量设置了不同字体大小的嵌套元素，这可能会变得棘手, 但它是可行的，如下图所示。为什么要使用这个麻烦的单位呢? 当你习惯这样做时，那么就会变得很自然，你可以使用em调整任何东西的大小，不只是文本。你可以有一个单位全部都使用 em 的网站，这样维护起来会很简单。 rem: 这个单位的效果和 em 差不多，除了 1rem 等于 HTML 中的根元素的字体大小， (i.e. ) ，而不是父元素。 这可以让你更容易计算字体大小，但是遗憾的是， rem 不支持 Internet Explorer 8 和以下的版本。如果你的项目需要支持较老的浏览器，你可以坚持使用em 或 px, 或者是 polyfill 就像 REM-unit-polyfill. （这个单位在“CSS的值和单位”一节也有讲解）12345678910111213html &#123; font-size: 10px;&#125;h1 &#123; font-size: 2.6rem;//26px&#125;p &#123; font-size: 1.4rem;//14px color: red; font-family: Helvetica, Arial, sans-serif;&#125; 字体样式需要了解“网页安全字体” 字体栈 由于你无法保证你想在你的网页上使用的字体的可用性 (甚至一个网络字体可能由于某些原因而出错), 你可以提供一个字体栈 (font stack)，这样的话，浏览器就有多种字体可以选择了。只需包含一个font-family属性，其值由几个用逗号分离的字体名称组成。 123p &#123; font-family: \"Trebuchet MS\", Verdana, sans-serif;&#125; 注意: 有一些字体名称不止一个单词，比如Trebuchet MS ，那么就需要用引号包裹。 在这种情况下，浏览器从列表的第一个开始，然后查看在当前机器中，这个字体是否可用。如果可用，就把这个字体应用到选中的元素中。如果不可用，它就移到列表中的下一个字体，然后再检查。 在 字体栈的最后提供一个合适的通用的字体名称(网页安全字体) 是个不错的办法，这样的话，即使列出的字体都无法使用，浏览器至少可以提供一个还算合适的选择。 font-style属性用来打开和关闭文本 italic (斜体)。 (你很少会用到这个属性，除非你因为一些理由想将斜体文字关闭斜体状态) 可能的值如下： normal: 将文本设置为普通字体 (将存在的斜体关闭) italic: 如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。 oblique: 将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。 font-weight属性设置文字的粗体大小。这里有很多值可选 (比如 -light, -normal, -bold, -extrabold, -black, 等等), 不过事实上你很少会用到 normal 和 bold以外的值： normal, bold: 普通或者加粗的字体粗细 lighter, bolder: 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。100–900: 数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。 text-transform属性允许你设置要转换的字体。 值包括： none: 防止任何转型。 uppercase: 将所有文本转为大写。 lowercase: 将所有文本转为小写。 capitalize: 转换所有单词让其首字母大写。 full-width: 将所有字形转换成全角，即固定宽度的正方形，类似于等宽字体，允许拉丁字符和亚洲语言字形（如中文，日文，韩文）对齐。 text-decoration属性（有趣！）设置/取消字体上的文本装饰(你将主要使用此方法在设置链接时取消设置链接上的默认下划线。) 可用值为： none: 取消已经存在的任何文本装饰。 underline: 文本下划线. overline: 文本上划线 line-through: 穿过文本的线 注意 text-decoration 是一个缩写形式，它由 text-decoration-line, text-decoration-style 和 text-decoration-color 构成。 text-decoration-style属性值的选择 最好不要分开写，因为分开写只有火狐浏览器支持。注意到 text-decoration 可以一次接受多个值. 1&lt;h1 class=\"la\"&gt;lalala&lt;/h1&gt; 123.la&#123; text-decoration: wavy line-through red;&#125; 文字阴影 你可以为你的文本应用阴影，使用 text-shadow 属性。这最多需要 4 个值， (前两个值是必须的) 如下例所示： 1text-shadow: 4px 4px 5px red; 4 个属性如下: 阴影与原始文本的水平偏移，可以使用大多数的 CSS 单位 length and size units, 但是 px 是比较合适的。这个值必须指定。 阴影与原始文本的垂直偏移;效果基本上就像水平偏移，除了它向上/向下移动阴影，而不是左/右。这个值必须指定。 模糊半径 - 更高的值意味着阴影分散得更广泛。如果不包含此值，则默认为0，这意味着没有模糊。可以使用大多数的 CSS 单位 length and size units. 阴影的基础颜色，可以使用大多数的 CSS 颜色单位 CSS color unit. 如果没有指定，默认为 black. 多种阴影可以通过包含以逗号分隔的多个阴影值，将多个阴影应用于同一文本 1234text-shadow: -1px -1px 1px #aaa, 0px 4px 1px rgba(0,0,0,0.5), 4px 4px 5px rgba(0,0,0,0.7), 0px 0px 7px rgba(0,0,0,0.4); 补充 颜色中Alpha为色彩空间，也就是透明度/不透明度。它的范围为0.0到1.0之间，0.5为半透明。 rgba(255,255,255,0)则表示完全透明的白色； rgba(0,0,0,1)则表示完全不透明的黑色； 文本对齐 text-align 属性用来控制文本如何和它所在的内容盒子对齐。可用值如下，并且在与常规文字处理器应用程序中的工作方式几乎相同： left: 左对齐文本。 right: 右对齐文本。 center: 居中文字 justify: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。特别是当应用于其中有很多长单词的段落时。如果你要使用这个，你也应该考虑一起使用别的东西，比如 hyphens，打破一些更长的词语。 行高 line-height 属性 设置文本每行之间的高，可以接受大多数单位 length and size units，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 font-size 来获得 line-height。 推荐的行高大约是 1.5–2 (双倍间距。) 所以要把我们的文本行高设置为字体高度的1.5倍，你可以使用这个:1line-height: 1.5; 字母和单词间距 letter-spacing 和 word-spacing 属性允许你设置你的文本中的字母与字母之间的间距、或是单词与单词之间的间距。 推荐使用外部样式表 --- 选择器参考图 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。 选择器通常是您需要改变样式的** HTML 元素**。 每条声明由一个属性和一个值组成。 多条声明中间用分号隔开。 1234选择器 &#123; 属性:值; 属性:值;&#125; 注意：如果值为若干单词，则要给值加引号： 1p &#123;font-family: \"sans serif\";&#125; 选择器列表 被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。123h1,h2,h3,h4,h5,h6 &#123; color: green; &#125; 插入外部样式表123&lt;head&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\" /&gt;&lt;/head&gt; 内部样式表1234567&lt;head&gt;&lt;style type=\"text/css\"&gt; hr &#123;color: sienna;&#125; p &#123;margin-left: 20px;&#125; body &#123;background-image: url(\"images/back40.gif\");&#125;&lt;/style&gt;&lt;/head&gt; 内联样式123&lt;p style=\"color: sienna; margin-left: 20px\"&gt;This is a paragraph&lt;/p&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"百度前端技术学院 第二天学习总结（HTML）","slug":"百度前端技术学院 第二天学习总结（HTML）","date":"2019-09-23T06:10:16.000Z","updated":"2019-09-27T06:30:33.530Z","comments":true,"path":"2019/09/23/百度前端技术学院 第二天学习总结（HTML）/","link":"","permalink":"http://yoursite.com/2019/09/23/百度前端技术学院 第二天学习总结（HTML）/","excerpt":"要好好利用input的type属性值 &lt;input&gt; 元素是最重要的表单元素。","text":"要好好利用input的type属性值 &lt;input&gt; 元素是最重要的表单元素。 最基础的：type=”text” 定义常规文本输入。 type=”radio” 定义单选按钮输入（选择多个选择之一） type=”submit” 定义提交按钮（提交表单） 像是type=”email”能对邮件地址进行验证。 type=”number”可以让输入框变成上下可选择数字范围。type=”range”可以让输入框变成滑动条可选择数字范围。 type=”date”让输入框有日期选择器。 type=”color”让输入框可以弹出颜色选择器。 属性值记得引号 js中写属性值一定要记得加上引号！！！ 验证今天的学习情况HTML是什么，HTML5是什么HTML HTML 是用来描述网页的一种语言。 HTML 指的是超文本标记语言 (Hyper Text Markup Language) HTML 不是一种编程语言，而是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 HTML5 HTML5 是最新的 HTML 标准。 HTML5 是专门为承载丰富的 web 内容而设计的，并且无需额外插件。 HTML5 拥有新的语义、图形以及多媒体元素。 HTML5 提供的新元素和新的 API 简化了 web 应用程序的搭建。 HTML5 是跨平台的，被设计为在不同类型的硬件（PC、平板、手机、电视机等等）之上运行。 新的语义元素，比如 &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, and &lt;section&gt;。 新的表单控件，比如数字、日期、时间、日历和滑块。 强大的图像支持（借由 &lt;canvas&gt;和 &lt;svg&gt;） 强大的多媒体支持（借由 &lt;video&gt; 和 &lt;audio&gt;） 强大的新 API，比如用本地存储取代 cookie。 HTML元素标签、属性都是什么概念？HTML元素标签 HTML 标签是由尖括号包围的关键词，比如&lt;html&gt; HTML 标签通常是成对出现的，比如&lt;b&gt;和 &lt;/b&gt; 标签对中的第一个标签是开始(开放)标签，第二个标签是结束(闭合)标签 HTML元素属性 HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 属性总是以名称/值对的形式出现，比如：name=”value”。 属性总是在 HTML 元素的开始标签中规定。 文档类型是什么概念，起什么作用？&lt;!DOCTYPE&gt; 声明帮助浏览器正确地显示网页。 Web 世界中存在许多不同的文档。只有了解文档的类型，浏览器才能正确地显示文档。 HTML 也有多个不同的版本，只有完全明白页面中使用的确切 HTML 版本，浏览器才能完全正确地显示出 HTML 页面。这就是 &lt;!DOCTYPE&gt; 的用处。 &lt;!DOCTYPE&gt;不是 HTML 标签。它为浏览器提供一项信息（声明），告诉浏览器 HTML 是用什么版本编写的。 它的出现位置在head标签的上面。 比如：HTML5的声明方式是：&lt;!DOCTYPE html&gt; meta标签都用来做什么的？ 元数据（metadata）是关于数据的信息。 &lt;meta&gt; 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。 典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。 标签始终位于 head 元素中。 元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。 针对搜索引擎的关键词一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。 下面的 meta 元素定义页面的描述： 1&lt;meta name=\"description\" content=\"Free Web tutorials on HTML, CSS, XML\" /&gt; name 和 content 属性的作用是描述页面的内容。 Web语义化是什么，是为了解决什么问题? 语义化简单说来就是让机器可以读懂内容。在发布内容的时候，就用机器可读的、被广泛认可的语义信息来描述内容，来降低机器处理 Web 内容的难度。 我们在提供内容的时候，首先要做的就是将内容本身进行合理的描述，暂时不用考虑它的最终呈现会是什么样子。 HTML5 并非 Web 语义唯一倚仗的规范，除了 W3C 和 WHATWG 外，还有其它的组织在为扩展、标准化 Web 语义做着贡献。只要有浏览器厂商、搜索引擎原意支持，它们的规范一样可以成为通用的基础设施。 为了解决机器难以读懂web上发布的各种内容的问题。 链接是什么概念，对应什么标签？ HTML 使用超级链接与网络上的另一个文档相连。 超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。 当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。 我们通过使用&lt;a&gt; 标签在 HTML 中创建链接。 有两种使用 &lt;a&gt;标签的方式：通过使用 href 属性 - 创建指向另一个文档的链接通过使用 name 属性 - 创建文档内的书签(锚) 常用标签都有哪些，都适合用在什么场景 head标签中的title标签定义文档的标题，显示在浏览器的标题栏或标签页上 h1-h6标签用于标题 a标签用于超链接（其中name属性可以用于创建导航栏） p标签用于文段，span标签用于行内文字 input标签非常多用，像他的type的不同属性值让他可以用于多个场景。 最基础的：type=”text” 定义常规文本输入。 type=”radio” 定义单选按钮输入（选择多个选择之一） type=”submit” 定义提交按钮（提交表单） 像是type=”email”能对邮件地址进行验证。 type=”number”可以让输入框变成上下可选择数字范围。type=”range”可以让输入框变成滑动条可选择数字范围。 type=”date”让输入框有日期选择器。 type=”color”让输入框可以弹出颜色选择器。 表单标签都有哪些，对应着什么功能，都有哪些属性？&lt;input&gt;元素是最重要的表单元素。 type属性：他决定了input这个输入框具体用来做什么，比如text那他就是用来输入文本的，button就是按钮，submit定义提交表单数据至表单处理程序的按钮。，radio是单选按钮，checkbox复选框， name 属性：如果form表单要正确地被提交，每个输入字段必须设置一个 name 属性。 ol, ul, li, dl, dd, dt等这些标签都适合用在什么地方，举个例子ol（有序 HTML 列表） start属性：规定开始数字，如从“50.咖啡”开始： 12345&lt;ol start=\"50\"&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;li&gt;茶&lt;/li&gt;&lt;/ol&gt; type属性：不同的属性值决定了有序列表前面的序号表示。 实例 ul（无序 HTML 列表） type属性：不同的属性值决定了无序列表前面的小图标图形。 实例 li 标签 定义列表项目。 &lt;li&gt; 标签可用在有序列表 &lt;ol&gt; 和无序列表 &lt;ul&gt; 中。 dl 标签 &lt;dl&gt; 标签定义了定义列表（definition list）。 &lt;dl&gt; 标签用于结合&lt;dt&gt; （定义列表中的项目）和&lt;dd&gt; （描述列表中的项目）。 实例 dt标签 &lt;dt&gt; 标签定义了定义列表中的项目（即术语部分）。 会顶格显示。 dd标签 &lt;dd&gt;在定义列表中定义条目的定义部分。 会缩进2个字符显示。 总的来说dl相当于ol与ul，dt、dd相当于li的位置。","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"百度前端技术学院 第二天学习笔记（HTML）（5）","slug":"百度前端技术学院 第二天学习笔记（HTML） 5","date":"2019-09-22T13:30:30.000Z","updated":"2019-09-27T06:58:02.275Z","comments":true,"path":"2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 5/","link":"","permalink":"http://yoursite.com/2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 5/","excerpt":"height 和 width 属性 height 和 width 属性仅用于 &lt;input type=&quot;image&quot;&gt;。,规定 &lt;input&gt; 元素的高度和宽度。","text":"height 和 width 属性 height 和 width 属性仅用于 &lt;input type=&quot;image&quot;&gt;。,规定 &lt;input&gt; 元素的高度和宽度。 注释：请始终规定图像的尺寸。如果浏览器不清楚图像尺寸，则页面会在图像加载时闪烁。 list 属性 list 属性引用的 &lt;datalist&gt; 元素中包含了&lt;input&gt; 元素的预定义选项。 具体使用如上datalist的实例。 min 和 max 属性 min 和 max 属性规定 &lt;input&gt; 元素的最小值和最大值。 min 和 max 属性适用于如需输入类型：number、range、date、datetime、datetime-local、month、time 以及 week。12345678Enter a date before 1980-01-01:&lt;input type=\"date\" name=\"bday\" max=\"1979-12-31\"&gt; Enter a date after 2000-01-01:&lt;input type=\"date\" name=\"bday\" min=\"2000-01-02\"&gt; Quantity (between 1 and 5):&lt;input type=\"number\" name=\"quantity\" min=\"1\" max=\"5\"&gt; multiple 属性（同时上传多个文件） multiple 属性是布尔属性。 如果设置multiple=&quot;multiple&quot;，则规定允许用户在&lt;input&gt; 元素中输入一个以上的值。 multiple 属性适用于以下输入类型：email 和 file。 实例1234567891011&lt;html&gt;&lt;body&gt;&lt;form action=\"/example/html5/demo_form.asp\" method=\"get\"&gt;选择图片：&lt;input type=\"file\" name=\"img\" multiple=\"multiple\" /&gt;&lt;input type=\"submit\" /&gt;&lt;/form&gt;&lt;p&gt;请尝试在浏览文件时选取一个以上的文件。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; pattern 属性 pattern 属性规定用于检查&lt;input&gt; 元素值的正则表达式。 pattern 属性适用于以下输入类型：text、search、url、tel、email、and password。 提示：请使用全局的 title 属性对模式进行描述以帮助用户。 提示：请在我们的 JavaScript 教程中学习更多有关正则表达式的知识。 实例123456789&lt;body&gt;&lt;form action=\"/example/html5/demo_form.asp\" method=\"get\"&gt;国家代码：&lt;input type=\"text\" name=\"country_code\" pattern=\"[A-z]&#123;3&#125;\"title=\"三个字母的国家代码\" /&gt;&lt;input type=\"submit\" /&gt;&lt;/form&gt;&lt;/body&gt; placeholder 属性 placeholder 属性规定用以描述输入字段预期值的提示（样本值或有关格式的简短描述）。 该提示会在用户输入值之前显示在输入字段中。 placeholder 属性适用于以下输入类型：text、search、url、tel、email 以及 password。 required 属性 required 属性是布尔属性。 如果设置，则规定在提交表单之前必须填写输入字段。 required 属性适用于以下输入类型：text、search、url、tel、email、password、date pickers、number、checkbox、radio、and file. required或者required=&quot;required&quot;都行。1Username: &lt;input type=\"text\" name=\"usrname\" required&gt; 或者 1Name: &lt;input type=\"text\" name=\"usr_name\" required=\"required\" /&gt; step 属性 step 属性规定&lt;input&gt; 元素的合法数字间隔。 示例：如果 step=”3”，则合法数字应该是 -3、0、3、6、等等。 提示：step 属性可与 max 以及 min 属性一同使用，来创建合法值的范围。 step 属性适用于以下输入类型：number、range、date、datetime、datetime-local、month、time 以及 week。 实例 HTML5 为 &lt;form&gt;增加如需属性：autocompletenovalidate","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"百度前端技术学院 第二天学习笔记（HTML）（4）","slug":"百度前端技术学院 第二天学习笔记（HTML） 4","date":"2019-09-22T12:10:30.000Z","updated":"2019-09-27T06:58:05.066Z","comments":true,"path":"2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 4/","link":"","permalink":"http://yoursite.com/2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 4/","excerpt":"&lt;textarea&gt; 元素 &lt;textarea&gt;元素定义多行输入字段（文本域） 实例","text":"&lt;textarea&gt; 元素 &lt;textarea&gt;元素定义多行输入字段（文本域） 实例123&lt;textarea name=\"message\" rows=\"10\" cols=\"30\"&gt;The cat was playing in the garden.&lt;/textarea&gt; &lt;input&gt; 元素 元素是最重要的表单元素。 text 定义常规文本输入。 radio 定义单选按钮输入（选择多个选择之一） submit 定义提交按钮（提交表单） &lt;input&gt; 元素的type属性值 &lt;input type=&quot;text&quot;&gt; 定义供文本输入的单行输入字段 &lt;input type=&quot;password&quot;&gt; 定义密码字段 &lt;input type=&quot;submit&quot;&gt; 定义提交表单数据至表单处理程序的按钮。(在表单的 action 属性中规定表单处理程序（form-handler) &lt;input type=&quot;radio&quot;&gt; 定义单选按钮。(checked属性为默认选中) &lt;input type=&quot;checkbox&quot;&gt; 定义复选框。(允许用户在有限数量的选项中选择零个或多个选项) &lt;input type=&quot;button&gt;定义按钮。 HTML5增加了多个新的输入类型（type属性值） &lt;input type=&quot;number&quot;&gt; 用于应该包含数字值的输入字段。您能够对数字做出限制。根据浏览器支持，限制可应用到输入字段。例子 输入限制（input）有很多属性：max规定输入字段的最大值。min 规定输入字段的最小值。value 规定输入字段的默认值。等等 &lt;input type=&quot;color&quot;&gt;用于应该包含颜色的输入字段。根据浏览器支持，点击输入字段时颜色选择器会出现输入字段中。例子 &lt;input type=&quot;range&quot;&gt; 用于应该包含一定范围内的值的输入字段。根据浏览器支持，输入字段能够显示为滑块控件。(number的效果是上下按键选择范围)例子 &lt;input type=&quot;date&quot;&gt; 用于应该包含日期(年月日)的输入字段。根据浏览器支持，日期选择器会出现输入字段中。 &lt;input type=&quot;month&quot;&gt; 允许用户选择月份和年份。根据浏览器支持，日期选择器会出现输入字段中。 &lt;input type=&quot;week&quot;&gt; 允许用户选择周和年。根据浏览器支持，日期选择器会出现输入字段中。 &lt;input type=&quot;time&quot;&gt; 允许用户选择时间（无时区）。根据浏览器支持，时间选择器会出现输入字段中。 &lt;input type=&quot;datetime&quot;&gt;允许用户选择日期(年月日)和时间（有时区）。根据浏览器支持，日期选择器会出现输入字段中。 &lt;input type=&quot;datetime-local&quot;&gt;允许用户选择日期(年月日)和时间（无时区）。根据浏览器支持，日期选择器会出现输入字段中。 &lt;input type=&quot;email&quot;&gt;用于应该包含电子邮件地址的输入字段。根据浏览器支持，能够在被提交时自动对电子邮件地址进行验证。某些智能手机会识别 email 类型，并在键盘增加 “.com” 以匹配电子邮件输入. &lt;input type=&quot;search&quot;&gt;用于搜索字段（搜索字段的表现类似常规文本字段）。 &lt;input type=&quot;tel&quot;&gt;用于应该包含电话号码的输入字段。目前只有 Safari 8 支持 tel 类型。 &lt;input type=&quot;url&quot;&gt; 用于应该包含 URL 地址的输入字段。根据浏览器支持，在提交时能够自动验证 url 字段。某些智能手机识别 url 类型，并向键盘添加 “.com” 以匹配 url 输入。 &lt;input&gt; 元素的不同属性 value属性规定输入字段的初始值 readonly属性规定输入字段为只读（不能修改）例子 disabled属性规定输入字段是禁用的。被禁用的元素是不可用和不可点击的。被禁用的元素不会被提交。==disabled 属性不需要值。它等同于 disabled=”disabled”。== size 属性规定输入字段的尺寸（输入框长度）（以字符计）size=&quot;40&quot; maxlength属性规定输入字段允许的最大长度.==(不会改变输入框长度)== 如设置 maxlength 属性，则输入控件不会接受超过所允许数的字符。该属性不会提供任何反馈。如果需要提醒用户，则必须编写 JavaScript 代码。 HTML5 表单元素 HTML5 增加了如下表单元素：&lt;datalist&gt;&lt;keygen&gt;&lt;output&gt; HTML5 &lt;datalist&gt; 元素 &lt;datalist&gt; 元素为 &lt;input&gt; 元素规定预定义选项列表。 用户会在他们输入数据时看到预定义选项的下拉列表。 &lt;input&gt; 元素的 list 属性必须引用&lt;datalist&gt; 元素的 id 属性。 效果：当用户点击输入框时可以看到下拉框里有Internet Explorer、Firefox…12345678910&lt;form action=\"action_page.php\"&gt;&lt;input list=\"browsers\"&gt;&lt;datalist id=\"browsers\"&gt; &lt;option value=\"Internet Explorer\"&gt; &lt;option value=\"Firefox\"&gt; &lt;option value=\"Chrome\"&gt; &lt;option value=\"Opera\"&gt; &lt;option value=\"Safari\"&gt;&lt;/datalist&gt; &lt;/form&gt; HTML5 为 &lt;input&gt;增加了如下属性 autocomplete(&lt;form&gt;也增加该属性) autofocus form formaction formenctype formmethod formnovalidate formtarget height 和 width list min 和 max multiple pattern (regexp) placeholder required step 总结 formxxxx的属性都是用于覆盖xxx属性的，也就是有两个input的情况下，一个input使用默认xxx属性，另一个input通过设置formxxxx达到另一个属性。 formaction用于==拥有两个提交按钮并对于不同动作的 HTML 表单== formmethod第一个提交按钮使用表单中method规定的GET/POST，第二个提交按钮通设置formmethod覆盖表单的 HTTP 方法。 formnovalidate用于拥有==两个提交按钮的表单（验证和不验证）== formtarget用于表单有两个提交按钮，对应==不同的目标窗口==（默认是原窗口，formtarget可设置提交到新窗口） autocomplete 属性 自动填值 autocomplete 属性适用于&lt;form&gt; 以及如下&lt;input&gt; 类型：text、search、url、tel、email、password、datepickers、range 以及 color。 autocomplete 属性规定表单或输入字段是否应该自动完成。 当自动完成开启（autocomplete=”on”），浏览器会基于用户之前的输入值自动填写值。 提示：您可以把表单的 autocomplete 设置为 on，同时把特定的输入字段==(手动填值)== 设置为 off，反之亦然。 例子 novalidate 属性 不验证数据 novalidate 属性属于 &lt;form&gt;属性。 如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证。 例子 autofocus 属性 鼠标自动到达输入框 autofocus 属性是布尔属性。 如果设置，则规定当页面加载时&lt;input&gt; 元素应该自动获得焦点。 例子 form 属性 form 属性规定&lt;input&gt; 元素所属的一个或多个表单。 提示：如需引用一个以上的表单，请使用空格分隔的表单 id 列表。 实例输入字段位于 HTML 表单之外（但仍属表单） formaction 属性 注意：formaction是form action的意思，可以用于拥有两个提交按钮并对于不同动作的 HTML 表单 formaction 属性规定当提交表单时处理该输入控件的文件的 URL。 formaction 属性覆盖 元素的 action 属性 formaction 属性适用于 type=”submit” 以及 type=”image”。 实例拥有两个提交按钮并对于不同动作的 HTML 表单1234567&lt;form action=\"action_page.php\"&gt; First name: &lt;input type=\"text\" name=\"fname\"&gt;&lt;br&gt; Last name: &lt;input type=\"text\" name=\"lname\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;br&gt; &lt;input type=\"submit\" formaction=\"demo_admin.asp\" value=\"Submit as admin\"&gt;&lt;/form&gt; formenctype 属性==没弄明白== formmethod 属性 formmethod 属性定义用以向 action URL 发送表单数据（form-data）的 HTTP 方法。(GET/POST) formmethod 属性覆盖 &lt;form&gt; 元素的 method 属性。 formmethod 属性适用于 type=”submit” 以及 type=”image”。 实例第二个提交按钮覆盖表单的 HTTP 方法1234567&lt;form action=\"action_page.php\" method=\"get\"&gt; First name: &lt;input type=\"text\" name=\"fname\"&gt;&lt;br&gt; Last name: &lt;input type=\"text\" name=\"lname\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit\"&gt; &lt;input type=\"submit\" formmethod=\"post\" formaction=\"demo_post.asp\" value=\"Submit using POST\"&gt;&lt;/form&gt; formnovalidate 属性 novalidate 属性是布尔属性。 如果设置，则规定在提交表单时不对 &lt;input&gt; 元素进行验证。 formnovalidate 属性覆盖&lt;form&gt; 元素的 novalidate 属性。 formnovalidate 属性可用于 type=”submit”。 实例拥有两个提交按钮的表单（验证和不验证）12345&lt;form action=\"/example/html5/demo_form.asp\" method=\"get\"&gt;E-mail: &lt;input type=\"email\" name=\"userid\" /&gt;&lt;br /&gt;&lt;input type=\"submit\" value=\"提交\" /&gt;&lt;br /&gt;&lt;input type=\"submit\" formnovalidate=\"formnovalidate\" value=\"进行没有验证的提交\" /&gt;&lt;/form&gt; formtarget 属性 formtarget 属性规定的名称或关键词指示提交表单后在何处显示接收到的响应。 formtarget 属性会覆盖 &lt;form&gt; 元素的 target 属性。 formtarget 属性可与 type=”submit” 和 type=”image” 使用。 实例这个表单有两个提交按钮，对应不同的目标窗口：1234567&lt;form action=\"action_page.php\"&gt; First name: &lt;input type=\"text\" name=\"fname\"&gt;&lt;br&gt; Last name: &lt;input type=\"text\" name=\"lname\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit as normal\"&gt; &lt;input type=\"submit\" formtarget=\"_blank\" value=\"Submit to a new window\"&gt;&lt;/form&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"百度前端技术学院 第二天学习笔记（HTML）（3）","slug":"百度前端技术学院 第二天学习笔记（HTML） 3","date":"2019-09-22T11:20:22.000Z","updated":"2019-10-05T10:47:46.905Z","comments":true,"path":"2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 3/","link":"","permalink":"http://yoursite.com/2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 3/","excerpt":"Iframeiframe 用于在网页内显示网页。 语法&lt;iframe src=&quot;URL&quot;&gt;&lt;/iframe&gt;","text":"Iframeiframe 用于在网页内显示网页。 语法&lt;iframe src=&quot;URL&quot;&gt;&lt;/iframe&gt; Iframe - 设置高度和宽度&lt;iframe src=&quot;demo_iframe.htm&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt; height 和 width 属性用于规定 iframe 的高度和宽度。 属性值的默认单位是像素，但也可以用百分比来设定（比如 “80%”）。 Iframe - 删除边框&lt;iframe src=&quot;demo_iframe.htm&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt; frameborder 属性规定是否显示 iframe 周围的边框。 设置属性值为 “0” 就可以移除边框： 使用 iframe 作为链接的目标 iframe 可用作链接的目标（target）。 链接的 target 属性必须引用 iframe 的 name 属性： 初始页面是百度，点击“W3School.com.cn”后百度页面会变成w3school页面。123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;iframe src=\"https://www.baidu.com/\" name=\"iframe_a\"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=\"https://www.w3school.com.cn/html/html_iframe.asp\" target=\"iframe_a\"&gt;W3School.com.cn&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;注释：&lt;/b&gt;由于链接的目标匹配 iframe 的名称，所以链接会在 iframe 中打开。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 背景需要注意：背景图像是否增加了页面的加载时间。小贴士：图像文件==不应超过 10k==。 文件路径 使用==相对路径==是个==好==习惯（如果可能）。 如果使用了相对路径，那么您的网页就不会与当前的基准 URL 进行绑定。所有链接在您的电脑上 (localhost) 或未来的公共域中均可正常工作。 绝对文件路径绝对文件路径是指向一个因特网文件的完整 URL：&lt;img src=&quot;https://www.w3school.com.cn/images/picture.jpg&quot; alt=&quot;flower&quot;&gt; 相对路径相对路径指向了相对于当前页面的文件。 &lt;img src=&quot;picture.jpg&quot;&gt; picture.jpg 位于与当前网页相同的文件夹 &lt;img src=&quot;images/picture.jpg&quot;&gt; picture.jpg 位于当前文件夹的 images 文件夹中 &lt;img src=&quot;/images/picture.jpg&quot;&gt; picture.jpg 当前站点根目录的 images 文件夹中 &lt;img src=&quot;../picture.jpg&quot;&gt; picture.jpg 位于当前文件夹的上一级文件夹中 标签&lt;base&gt; 标签为页面上的所有链接规定==默认地址==或==默认目标==（target） 1234&lt;head&gt;&lt;base href=\"http://www.w3school.com.cn/images/\" /&gt;&lt;base target=\"_blank\" /&gt;&lt;/head&gt; 所有链接一个目标(target)【使用 base】 在内使用使页面中的所有标签在新窗口中打开。 比如&lt;base target=&quot;_blank&quot; /&gt;使得内的超链接都将在==新窗口==中加载，因为 target 属性被设置为 “_blank”。（个别超链接需要不同的打开方式可以单独在设置target属性） 例子 HTML 字符实体 HTML 中的预留字符必须被替换为字符实体。 比如：如需显示小于号，我们必须这样写：&amp;lt; 或 &amp;#60; 有用的字符实体 表单（form）Action 属性 action 属性定义在提交表单时执行的动作。 &lt;form action=&quot;action_page.php&quot;&gt;如果省略 action 属性，则 action 会被设置为当前页面。 Method 属性 method 属性规定在提交表单时所用的 HTTP 方法（GET 或 POST） &lt;form action=&quot;action_page.php&quot; method=&quot;GET&quot;&gt;使用 GET（默认方法）不安全 当您使用 GET 时，表单数据在页面地址栏中是可见的：action_page.php?firstname=Mickey&amp;lastname=Mouse 如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息，可以使用GET。 注释：GET 最适合少量数据的提交。浏览器会设定容量限制。 推荐使用 POST： 如果表单正在更新数据，或者包含敏感信息（例如密码）。 POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。 Name 属性 如果要正确地被提交，每个输入字段必须设置一个 name 属性。 &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; 用&lt;fieldset&gt;组合表单数据 &lt;fieldset&gt; 元素组合表单中的相关数据 &lt;legend&gt; 元素为 &lt;fieldset&gt; 元素定义标题。 例子 效果：会有一个粗框把表格内容框住。 &lt;select&gt; 元素（下拉列表）123456&lt;select name=\"cars\"&gt;&lt;option value=\"volvo\"&gt;Volvo&lt;/option&gt;&lt;option value=\"saab\"&gt;Saab&lt;/option&gt;&lt;option value=\"fiat\"&gt;Fiat&lt;/option&gt;&lt;option value=\"audi\"&gt;Audi&lt;/option&gt;&lt;/select&gt; 列表通常会把==首个==选项显示为==被选选项==。 您能够通过添加==selected属性==来==定义预定义选项==。&lt;option value=&quot;fiat&quot; selected&gt;Fiat&lt;/option&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"百度前端技术学院 第二天学习笔记（HTML）（2）","slug":"百度前端技术学院 第二天学习笔记（HTML） 2","date":"2019-09-22T10:20:22.000Z","updated":"2019-09-27T06:44:18.852Z","comments":true,"path":"2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 2/","link":"","permalink":"http://yoursite.com/2019/09/22/百度前端技术学院 第二天学习笔记（HTML） 2/","excerpt":"单元格边距(Cell padding)本例演示如何使用 Cell padding 来创建单元格内容与其边框之间的空白。","text":"单元格边距(Cell padding)本例演示如何使用 Cell padding 来创建单元格内容与其边框之间的空白。 单元格间距(Cell spacing)本例演示如何使用 Cell spacing 增加单元格之间的距离。 有序列表（ol）与无序列表（ul） ul: unordered lists 无序列表 ol: ordered lists 有序列表 两种列表中的每个列表项始于&lt;li&gt; 1234&lt;ul&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; 1234&lt;ol&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; 无序列表中的不同类型&lt;ul&gt;的属性 type=”disc”实心圆（默认） type=”circle”空心圆 type=”square”实心方块 有序列表中的不同类型&lt;ol&gt;的属性 默认：数字列表 type=”A”：大写字母列表 type=”a”:小写字母列表 type=”I”：罗马字母列表 type=”i”：小写罗马字母列表 定义列表dl dl：definition list 自定义列表以&lt;dl&gt;标签开始。每个自定义列表项以&lt;dt&gt;开始。每个自定义列表项的定义以&lt;dd&gt; 开始。123456&lt;dl&gt;&lt;dt&gt;Coffee&lt;/dt&gt;&lt;dd&gt;Black hot drink&lt;/dd&gt;&lt;dt&gt;Milk&lt;/dt&gt;&lt;dd&gt;White cold drink&lt;/dd&gt;&lt;/dl&gt; 实现效果： Coffee Black hot drink Milk White cold drink 分类块级元素:&lt;div&gt;元素 &lt;div&gt;元素是块级元素，它是可用于组合其他 HTML 元素的容器。 &lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。 设置&lt;div&gt; 元素的类(style)，使我们能够为相同的 元素设置相同的类1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;.cities &#123; background-color:black; color:white; margin:20px; padding:20px;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"cities\"&gt;&lt;h2&gt;London&lt;/h2&gt;&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 分类行内元素:&lt;span&gt; 元素 &lt;span&gt;元素是内联元素，可用作文本的容器。 元素也没有特定的含义。 内联元素在显示时通常不会以新行开始。 设置 &lt;span&gt; 元素的类(style)，能够为相同的 元素设置相同的样式。12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt; span.red &#123;color:red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;My &lt;span class=\"red\"&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; HTML布局 参考 行间距line-height HTML 框架 重要提示： 不能 将 标签与 标签同时使用！不过，假如你添加包含一段文本的 标签，就必须将这段文字嵌套于 标签内。（在下面的第一个实例中，可以查看它是如何实现的。） 1234567891011121314&lt;html&gt;&lt;frameset cols=\"25%,50%,25%\"&gt; &lt;frame src=\"/example/html/frame_a.html\"&gt; &lt;frame src=\"/example/html/frame_b.html\"&gt; &lt;frame src=\"/example/html/frame_c.html\"&gt;&lt;noframes&gt;&lt;body&gt;您的浏览器无法处理框架！&lt;/body&gt;&lt;/noframes&gt;&lt;/frameset&gt;&lt;/html&gt; 通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。 框架结构标签（&lt;frameset&gt;） 框架结构标签（&lt;frameset&gt;）定义如何将窗口分割为框架 每个 frameset 定义了一系列行或列（混合框架结构使用两对 将含有三份文档的框架结构混合置于行和列之中） rows/columns(cols)的值规定了每行或每列占据屏幕的面积(rows=”25%,50%,25%”规定了每行占据屏幕的面积【宽度】) frameset 标签也被某些文章和书籍译为框架集。 框架标签（Frame）Frame 标签定义了放置在每个框架中的 HTML 文档。 1234567891011&lt;html&gt;&lt;frameset cols=\"25%,50%,25%\"&gt; &lt;frame src=\"/example/html/frame_a.html\"&gt; &lt;frame src=\"/example/html/frame_b.html\"&gt; &lt;frame src=\"/example/html/frame_c.html\"&gt;&lt;/frameset&gt;&lt;/html&gt; 在上面的这个例子中，我们设置了一个三列的框架集。第一列被设置为占据浏览器窗口的 25%。第二列被设置为占据浏览器窗口的 50%。第三列被设置为占据浏览器窗口的 25%。HTML 文档 “frame_a.htm” 被置于第一个列中，而 HTML 文档 “frame_b.htm” 被置于第二个列中，而 HTML 文档 “frame_c.htm” 被置于第三个列中。 noresize 属性 给加上noresize=”noresize”，则框架是不可调整尺寸的。在框架间的边框上拖动鼠标，你会发现边框是无法移动的。 单独给加上noresize=”noresize”,则该框架不可调整尺寸。123456789&lt;html&gt;&lt;frameset cols=\"50%,25%,25%\"&gt; &lt;frame src=\"/example/html/frame_a.html\" noresize=\"noresize\" /&gt; &lt;frame src=\"/example/html/frame_b.html\" /&gt; &lt;frame src=\"/example/html/frame_c.html\" /&gt;&lt;/frameset&gt;&lt;/html&gt; rows，cols，colspan，rowspan rows排 cols列 colspan合并列 rowspan合并排 导航框架本例演示如何制作导航框架。导航框架包含一个将第二个框架作为目标的链接列表。名为 “contents.htm” 的文件包含三个链接。 123456&lt;html&gt;&lt;frameset cols=\"120,*\"&gt; &lt;frame src=\"/example/html/html_contents.html\"&gt; &lt;frame src=\"/example/html/frame_a.html\" name=\"showframe\"&gt;&lt;/frameset&gt;&lt;/html&gt; https://www.w3school.com.cn/example/html/html_contents.html中代码： 1234567&lt;body&gt;&lt;a href=\"/example/html/frame_a, html\"target=\"showframe\"&gt;Frame a&lt;/a&gt;&lt;br&gt;&lt;a href=\"/example/html/frame_b. html\"target=\"showframe\"&gt;Frame b&lt;/a&gt;&lt;br&gt;&lt;a href=\"/example/html/frame_c. html\"target=\"showframe\"&gt;Frame c&lt;/a&gt;&lt;/body&gt; 回顾一下标签中的target属性 参考 在框架中打开窗口不用打开一个完整的浏览器窗口，使用 target 更通常的方法是在一个 显示中将超链接内容定向到一个或者多个框架中。可以将这个内容列表放入一个带有两个框架的文档的其中一个框架中，并用这个相邻的框架来显示选定的文档. 举例： 1234&lt;frameset cols=\"100,*\"&gt; &lt;frame src=\"toc.html\"&gt; &lt;frame src=\"pref.html\" name=\"view_frame\"&gt;&lt;/frameset&gt; 当浏览器最初显示这两个框架的时候，左边这个框架包含目录，右边这个框架包含前言(初始化时就显示在页面右侧的pref.html)。这是 “toc.html” （即：左侧目录）的源代码： 1234567&lt;h3&gt;Table of Contents&lt;/h3&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=\"pref.html\" target=\"view_frame\"&gt;Preface&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"chap1.html\" target=\"view_frame\"&gt;Chapter 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"chap2.html\" target=\"view_frame\"&gt;Chapter 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"chap3.html\" target=\"view_frame\"&gt;Chapter 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 请注意，在文档 “toc.html” 中，每个链接的目标（target属性值） 都是 “view_frame”，也就是右边的框架。当用户从左边框架中的目录中选择一个链接时，浏览器会将这个关联的文档载入并显示在右边这个 “view_frame” 框架中。当其他链接被选中时，右边这个框架中的内容也会发生变化，而左边这个框架始终保持不变。 结合我们上文说过的“锚”跳转至框架内的一个指定的节本例演示两个框架。其中的一个框架设置了指向另一个文件内指定的节的链接。这个”link.htm”文件内指定的节使用 进行标识。 123456&lt;html&gt;&lt;frameset cols=\"20%,80%\"&gt; &lt;frame src=\"/example/html/frame_a.html\"&gt; &lt;frame src=\"/example/html/link.html#C10\"&gt;&lt;/frameset&gt;&lt;/html&gt; 使用框架导航跳转至指定的节本例演示两个框架。左侧的导航框架包含了一个链接列表，这些链接将第二个框架作为目标。第二个框架显示被链接的文档。导航框架其中的链接指向目标文件中指定的节。 123456&lt;html&gt;&lt;frameset cols=\"180,*\"&gt;&lt;frame src=\"/example/html/content.html\"&gt;&lt;frame src=\"/example/html/link.html\" name=\"showframe\"&gt;&lt;/frameset&gt;&lt;/html&gt;","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"百度前端技术学院 第二天学习笔记（HTML）（1）","slug":"百度前端技术学院 第二天学习笔记（HTML）","date":"2019-09-22T08:18:22.000Z","updated":"2019-09-27T06:41:58.418Z","comments":true,"path":"2019/09/22/百度前端技术学院 第二天学习笔记（HTML）/","link":"","permalink":"http://yoursite.com/2019/09/22/百度前端技术学院 第二天学习笔记（HTML）/","excerpt":"HTML 水平线&lt;hr /&gt;","text":"HTML 水平线&lt;hr /&gt; &lt;p&gt;&lt;/p&gt;与&lt;br /&gt; &lt;br /&gt;是换行,但不是空行，如果想要中间空行就需要&lt;br /&gt;&lt;br /&gt;才能实现效果 &lt;p&gt;&lt;/p&gt;前后会出现空行 两段文字中&lt;br /&gt;&lt;br /&gt;相当于放置两组&lt;p&gt;&lt;/p&gt; 上标与下标 &lt;sup&gt;&lt;/sup&gt;实现效果：上标 &lt;sub&gt;&lt;/subs&gt;实现效果：下标 W3School的例子 附赠粗体&lt;b&gt;，斜体&lt;i&gt;，大号字体&lt;big&gt;,小号字体&lt;small&gt; &lt;p&gt;&lt;/p&gt;与&lt;pre&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;中无论出现多少个空格或换行都只识别为一个空格。 它不能保留（我是空格） 空格 （我是换行）和换行。 &lt;pre&gt;&lt;/pre&gt;是预格式文本。 它保留了 空格 和换行。 ==&lt;pre&gt;&lt;/pre&gt;适合用来显示计算机代码== &lt;abbr&gt;&lt;/abbr&gt;与&lt;acronym&gt;&lt;/acronym&gt; 在某些浏览器中，当您把鼠标移至缩略词语上时，会展示表达的完整版本。 该标签的title属性值为想要表达的完整版本。 在chrome中两个都可用。比如:缩略词语 [W3School的例子](https://www.w3school.com.cn/tiy/t.asp?f=html_abbracronym) 长引用与短引用 长(块)引用&lt;blockquote&gt;&lt;/blockquote&gt;浏览器会插入换行和外边距。（浏览器通常会对&lt;blockquote&gt;元素进行缩进处理） 短引用&lt;q&gt;&lt;/q&gt;不会插入换行和外边距，但会有双引号。 删除字效果和插入字效果 &lt;del&gt;&lt;/del&gt;实现效果：二十 &lt;ins&gt;&lt;/ins&gt;实现效果：十二 没有下划线的链接123&lt;a href=\"/example/html/lastpage.html\" style=\"text-decoration:none\"&gt;这是一个没有下划线的链接！&lt;/a&gt; 这是一个没有下划线的链接！ 超链接中的链接可以是图片或其他 HTML 元素-提示：”链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。 1&lt;a href=\"C:\\Users\\HLZ\\Desktop\\证件\\立介摄影 一寸.jpg\"&gt;证件照&lt;/a&gt; 新窗口打开超链接 target=&quot;_blank&quot;如果把链接的 target 属性设置为 “_blank”，该链接会在新窗口中打开。1&lt;a href=\"http://www.w3school.com.cn/\" target=\"_blank\"&gt;Visit W3School!&lt;/a&gt; 命名锚 可以作为目录导航来使用。 提示：命名锚经常用于在大型文档开始位置上创建目录。可以为每个章节赋予一个命名锚，然后把链接到这些锚的链接放到文档的上部。==如果您经常访问百度百科，您会发现其中几乎每个词条都采用这样的导航方式。== 提示：假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。 1&lt;a name=\"label\"&gt;锚（显示在页面上的文本）&lt;/a&gt; name 属性规定锚（anchor）的名称。 当使用命名锚（named anchors）时，我们可以创建直接跳至该命名锚（比如页面中某个小节）的链接，这样使用者就无需不停地滚动页面来寻找他们需要的信息了。 实际运用首先，我们在 HTML 文档中对锚进行命名（创建一个书签）： 1&lt;a name=\"tips\"&gt;基本的注意事项 - 有用的提示&lt;/a&gt; 然后，我们在同一个文档中创建指向该锚的链接： 1&lt;a href=\"#tips\"&gt;有用的提示&lt;/a&gt; 您也可以在其他页面中创建指向该锚的链接： 1&lt;a href=\"http://www.w3school.com.cn/html/html_links.asp#tips\"&gt;有用的提示&lt;/a&gt; 在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。 一个完整的例子 外部样式表当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。 123&lt;head&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"&gt;&lt;/head&gt; 内部样式表当单个文件需要特别样式时，就可以使用内部样式表。你可以在head 部分通过 &lt;style&gt; 标签定义内部样式表。 123456&lt;head&gt;&lt;style type=\"text/css\"&gt;body &#123;background-color: red&#125;p &#123;margin-left: 20px&#125;&lt;/style&gt;&lt;/head&gt; 内联样式当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。 123&lt;p style=\"color: red; margin-left: 20px\"&gt;This is a paragraph&lt;/p&gt; 图片的替换文本属性（Alt）alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。 1&lt;img src=\"boat.gif\" alt=\"Big Boat\"&gt; 图片的align属性 align vi. 排列；排成一行 他的属性值（bottom，middle，top）设置图片的对齐方式 left,right使图片浮动在文本的左右侧。 标签的usemap属性——创建图像映射 本例显示如何创建带有可供点击区域的图像地图。其中的每个区域都是一个超级链接。 usemap用法 标签中的&lt;area&gt; 标签定义图像映射中的区域（注：图像映射指得是带有可点击区域的图像）。area 元素总是嵌套在 标签中。&lt;area&gt; 标签相关用法规定区域的coords属性","categories":[{"name":"百度前端技术学院","slug":"百度前端技术学院","permalink":"http://yoursite.com/categories/百度前端技术学院/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"history对象","slug":"history对象","date":"2019-09-16T03:36:16.000Z","updated":"2019-09-26T06:23:47.386Z","comments":true,"path":"2019/09/16/history对象/","link":"","permalink":"http://yoursite.com/2019/09/16/history对象/","excerpt":"history历史对象history 对象保存了用户在浏览器中访问页面的历史记录。","text":"history历史对象history 对象保存了用户在浏览器中访问页面的历史记录。 history对象的属性 length返回浏览器历史列表中的 URL数量 history对象的方法回到历史记录的上一步 语法：history.back（） 功能：回到历史记录的上一步 说明：相当于使用了history.go（-1） 补充：使用history.go（-2）则是回到历史记录的上一步的再上一步 举例： index10.html里面给个超链接跳转到index11.html： 1&lt;a href=\"index11.html\"&gt;跳转到index11.html&lt;/a&gt; index11.html里给个后退按钮： 1234567891011&lt;body&gt; &lt;p&gt;这是index11.html&lt;/p&gt; &lt;p&gt;&lt;input type=\"button\" id=\"btn\" value=\"后退\"&gt;&lt;/p&gt; &lt;script&gt; var btn=document.getElementById(\"btn\"); btn.onclick=function()&#123; history.back(); //history.go(-1); &#125; &lt;/script&gt;&lt;/body&gt; 回到历史记录的下一步 语法：location.forward（） 注意：千万不要忘记forward后面的括号 功能：回到历史记录的下一步 说明：相当于使用了history.go（1） 举例 index11.html：有新增的2个按钮（前进，前进两个页面）和一个跳转index12.html的链接 1234567891011121314151617181920212223242526&lt;body&gt; &lt;p&gt;这是index11.html&lt;/p&gt; &lt;p&gt; &lt;a href=\"index12.html\"&gt;跳转到index12.html&lt;/a&gt; &lt;/p&gt; &lt;p&gt;&lt;input type=\"button\" id=\"btn\" value=\"后退\"&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=\"button\" id=\"btn2\" value=\"前进\"&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=\"button\" id=\"btn3\" value=\"前进2\"&gt;&lt;/p&gt; &lt;script&gt; var btn = document.getElementById(\"btn\"); var btn2 = document.getElementById(\"btn2\"); var btn3 = document.getElementById(\"btn3\"); btn.onclick = function () &#123; // history.back(); history.go(-1); &#125; btn2.onclick = function () &#123; history.forward(); // history.go(1); &#125; btn3.onclick = function () &#123; history.go(2); &#125; &lt;/script&gt;&lt;/body&gt; 做两个可供跳转的页面index12.html和index13.html，从12跳到13 123456&lt;body&gt; &lt;p&gt;这是index12.html&lt;/p&gt; &lt;p&gt; &lt;a href=\"index13.html\"&gt;跳转到index13.html&lt;/a&gt; &lt;/p&gt;&lt;/body&gt; 123&lt;body&gt; &lt;p&gt;这是index13.html&lt;/p&gt; &lt;/body&gt; 跳到13以后再回到11去测试按钮 前进或者后退多步 语法：history.go（-n） 功能：回到历史记录的前n步 语法：history.go（n） 功能：回到历史记录的后n步","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-09-15T14:22:54.206Z","updated":"2019-09-15T14:22:54.206Z","comments":true,"path":"2019/09/15/hello-world/","link":"","permalink":"http://yoursite.com/2019/09/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}